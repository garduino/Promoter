'From Squeak3.8 of ''5 May 2005'' [latest update: #6665] on 19 April 2006 at 2:58:30 pm'!!AudioChatGUI methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:36'!defaultBorderWidth	"answer the default border width for the receiver"	^ 4! !!AudioChatGUI methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:24'!defaultColor	"answer the default color/fill style for the receiver"	^ Color yellow! !!AudioChatGUI methodsFor: 'initialization' stamp: 'dgd 2/14/2003 19:48'!initialize	"initialize the state of the receiver"	super initialize.	""	transmitWhileRecording _ false.	handsFreeTalking _ false.	mycodec _ GSMCodec new.	myrecorder _ ChatNotes new.	mytargetip _ ''.		self start2.	self changeTalkButtonLabel! !!AudioChatGUI methodsFor: 'stuff' stamp: 'aoy 2/17/2003 01:01'!changeTalkButtonLabel	| bText |	self transmitWhileRecording.	handsFreeTalking 		ifTrue: 			[theTalkButton				labelUp: 'Talk';				labelDown: 'Release';				label: 'Talk'.			bText := 'Click once to begin a message. Click again to end the message.']		ifFalse: 			[theTalkButton				labelUp: 'Talk';				labelDown: (transmitWhileRecording 							ifTrue: ['TALKING']							ifFalse: ['RECORDING']);				label: 'Talk'.			bText := 'Press and hold to record a message.'].	bText := transmitWhileRecording 		ifTrue: [bText , ' The message will be sent while you are speaking.']		ifFalse: [bText , ' The message will be sent when you are finished.'].	theTalkButton setBalloonText: bText! !!AudioChatGUI class methodsFor: 'parts bin' stamp: 'sw 10/24/2001 16:35'!descriptionForPartsBin	"Answer a description of the receiver for use in a parts bin"	^ self partName: 	'Audio chat'		categories:		#('Collaborative')		documentation:	'A tool for talking to other Squeak uers'		sampleImageForm: (Form	extent: 110@70	depth: 8	fromArray: #( 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193909241 4193845248 4193909241 4193845505 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 33159673 4193845248 4193909241 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843257 4193845248 4193908993 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 4193845248 4193845505 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 33095680 4193845505 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789619457 33095680 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789642629 1535466373 1535466373 1535466373 1535466373 1535466373 1535466373 1535466373 1535466373 1535466373 1535466465 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 2239817189 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857048960 2246173153 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789676933 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3850756577 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789653477 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857024481 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789642725 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857013729 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3783321061 3842048257 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857048960 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3783648741 31843813 31843813 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3842106853 3857048965 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3783321061 31843813 3857048833 16901605 3842106625 31843813 3842106625 31843813 3842048257 3857049061 16901605 16843237 3857048960 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3783648741 31843813 3856990693 3856990693 16843237 3842106853 16843237 3842106853 31843813 31843585 3856990693 3842106853 3857048965 3789619457 16842752 4177592577 31580641 3777505320 673720360 673720360 685891880 673720360 673720360 673720545 3777505320 673720360 673720360 685892065 3783321061 31843813 3856990693 3856990693 3842106853 3842106853 3842106853 3842106853 16843009 31785445 3857049061 3842106853 3857048960 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3783648741 31843813 3856990693 3856990693 3842106853 3842106853 3842106853 3842106853 31843813 3856990693 3857049061 3842106853 3857048965 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3783321061 31843813 31785445 3856990693 3842106853 3842106853 3842106853 3842106853 31843813 31843585 3856990693 3842106853 3857048960 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3783648741 3842048257 3857048833 16901605 16843237 16843237 16843237 16843237 3842048257 3857049061 16901605 3856990693 3857048965 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3783321061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857048960 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3789642725 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857013729 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3789653477 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857024481 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3789676933 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3850756577 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3789677025 2239817189 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857048960 2246173153 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3789677025 3789642629 1535466373 1535466373 1535466373 1535466373 1535466373 1535466373 1535466373 1535466373 1535466373 1535466465 3789677025 3789619457 16842752 4177592577 31580641 3777552865 3789677025 3789677025 685891880 3789677025 3789677025 3789629665 3777552865 3789677025 3789677025 685892065 3789677025 3789677025 3789677025 3789676928 2239792512 2239792512 2239792512 2239792512 2239792512 2239816161 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3777505320 673720360 673720360 685891880 673720360 673720360 673720545 3777505320 673720360 673720360 685892065 3789677025 3789677025 3789677025 3783613413 3857049061 3857049061 3857049061 3857049061 3857049061 3857013637 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 2246436325 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 2246173153 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789676933 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3850756577 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789676928 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3850428897 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 16843009 16843009 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789642725 3842048257 16901605 16901605 3857049061 3857049061 3857049061 3857049061 3857013729 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789619457 16843009 16843009 16843233 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789653477 3856990693 3856990693 3842106853 3857049061 3857049061 3857049061 3857049061 3857024481 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 16843009 1888776340 1888776340 1879113985 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789642725 3856990693 3856990693 3842106853 3842048257 3857048833 16901377 16901605 3857013729 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789676801 16880752 2490406000 2490406000 2490405889 16900577 3789677025 3789677025 3789677025 3789677025 3789677025 3789653477 3856990693 3856990693 3842106853 31843813 31843813 31843813 31843813 3857024481 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789619457 26505364 1888776340 1888776340 1888776340 16843233 3789677025 3789677025 3789677025 3789677025 3789677025 3789642725 3856990465 16901605 3842106853 3842048257 31843813 3842106625 3857049061 3857013729 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789619457 2490406000 2490406000 2490406000 2490406000 2483093985 3789677025 3789677025 3789677025 3789677025 3789677025 3789653477 3856990693 3857049061 3842106853 31843813 31843813 3842106625 3857049061 3857024481 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3774939540 1888776340 1888776340 1888776340 1888776340 1888747777 3789677025 3789677025 3789677025 3789677025 3789677025 3789642725 3856990693 3857049061 3842106853 31843813 31843813 3856990693 3857049061 3857013729 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3774939504 2490406000 2490406000 2490406000 2490406000 2490368257 3789677025 3789677025 3789677025 3789677025 3789677025 3789653477 3842048257 3857049061 16843237 3842048257 3842106853 3856990693 3857049061 3857024481 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3774939393 3789677025 16871572 1888776340 1895825407 1888776340 1888776340 1888776193 31580641 3789677025 3789677025 3789677025 3789677025 3789642725 3857049061 3857049061 3857049061 3857049061 3857049061 3842106853 3857049061 3857013729 3789677025 3789677025 3789619457 16842752 4177592577 31580641 31580641 31580641 16880752 2490406000 4285568112 4285568112 2490406000 2490405889 31580641 3789677025 3789677025 3789677025 3789677025 3789676928 3857049061 3857049061 3857049061 3857049061 3857049061 3842106853 3857049061 3850428897 3789677025 3789677025 3789619457 16842752 4177592577 31580641 31580641 31580641 16871572 1888776340 4287918228 4287918228 1888776340 1888776193 31580641 3789677025 3789677025 3789677025 3789677025 3789676933 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3850756577 3789677025 3789677025 3789619457 16842752 4177592577 31580641 31580641 31580641 16880752 2490406000 4285568112 4285568112 2490406000 2490405889 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 2246436325 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 2246173153 3789677025 3789677025 3789619457 16842752 4177592577 31580641 31580641 31580641 16871572 1888776340 4287918228 4287918228 1888776340 1888776193 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3783613413 3857049061 3857049061 3857049061 3857049061 3857049061 3857013637 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 31580641 31580641 16880752 2490406000 4285568112 4285568112 2490406000 2490405889 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789676928 2239792512 2239792512 2239792512 2239792512 2239792512 2239816161 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 31580641 31580641 16871572 1888776340 4287918228 4287918228 1888776340 1888776193 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 1535466373 1535466373 1535466373 1535466373 1535466373 1541530081 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3774939393 3789677025 16880752 2490406000 2499805183 2490406000 2490406000 2490405889 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789653376 3857049061 3857049061 3857049061 3857049061 3857049061 3850405345 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 16871572 1888776340 1888776340 1888776340 1888776340 1888776193 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3783648741 3857049061 3857049061 3857049061 3857049061 3857049061 3857048965 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3774939504 2490406000 2490406000 2490406000 2490406000 2490368257 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 2246436325 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 2246173153 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3774939540 1888776340 1888776340 1888776340 1888776340 1888747777 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 1541793253 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 1541530081 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789619457 2490406000 2490406000 2490406000 2490406000 2483093985 3789677025 3789677025 3789677025 3789677025 3789677025 3789676928 3856990465 16843237 3857049061 3857048833 31843813 31843813 3857049061 3850428897 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789619457 26505364 1888776340 1888776340 1888776340 16843233 3789677025 3789677025 3789677025 3789677025 3789677025 3789676933 3856990693 31785445 3857049061 3857049061 31843585 31843813 3857049061 3850756577 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789676801 16880752 2490406000 2490406000 2490405889 16900577 3789677025 3789677025 3789677025 3789677025 3789677025 3789676928 3857049061 31843813 3842048257 3857049061 31843813 31843585 31843813 3850428897 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 16843009 1888776340 1888776340 1879113985 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789676933 3857049061 31843813 31843813 31843813 31843813 31785445 3857049061 3850756577 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789619457 16843009 16843009 16843233 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789676928 3857049061 31843813 3842048257 31843813 31843813 16901605 3857049061 3850428897 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 16843009 16843009 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789676933 3857049061 31843813 31843813 31843813 31843813 31785445 3857049061 3850756577 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789676928 3857049061 31843813 31843813 31843813 31843813 31843585 3857049061 3850428897 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789676933 3857048833 16901605 3842048257 3842106625 16901377 16901377 31843813 3850756577 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789676928 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 3850428897 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 1541793253 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 1541530081 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 2246436325 3857049061 3857049061 3857049061 3857049061 3857049061 3857049061 2246173153 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3783648741 3857049061 3857049061 3857049061 3857049061 3857049061 3857048965 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789653376 3857049061 3857049061 3857049061 3857049061 3857049061 3850405345 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 1535466373 1535466373 1535466373 1535466373 1535466373 1541530081 3789677025 3789677025 3789677025 3789619457 16842752 4177592577 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789619457 16842752 4193845505 31580641 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789677025 3789619457 33095680 4193845505 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 33095680 4193908993 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 4193845248 4193909241 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843257 4193845248 4193909241 4193845505 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 16843009 33159673 4193845248)	offset: 0@0)! !!EToyChatMorph methodsFor: 'as yet unclassified' stamp: 'ar 12/17/2001 02:18'!chatFrom: ipAddress name: senderName text: text	| initialText attrib |	recipientForm ifNil: [		initialText _ senderName asText allBold.	] ifNotNil: [		attrib _ TextAnchor new anchoredMorph: recipientForm "asMorph".		initialText _ (String value: 1) asText.		initialText addAttribute: attrib from: 1 to: 1.	].	self appendMessage: initialText,' - ',text,String cr.	EToyCommunicatorMorph playArrivalSound.! !!EToyChatMorph methodsFor: 'as yet unclassified' stamp: 'ar 12/17/2001 02:18'!startOfMessageFromMe	myForm ifNil: [		myForm _ EToySenderMorph pictureForIPAddress: NetNameResolver localAddressString.		myForm ifNotNil: [			myForm _ myForm scaledToSize: 20@20		].	].	myForm ifNil: [		^(Preferences defaultAuthorName asText allBold addAttribute: TextColor blue)	].	^(String value: 1) asText		addAttribute: (TextAnchor new anchoredMorph: myForm);		yourself! !!EToyChatMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:34'!defaultBorderColor	"answer the default border color/fill style for the receiver"	^ self standardBorderColor! !!EToyChatMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:36'!defaultBorderWidth	"answer the default border width for the receiver"	^ 8! !!EToyChatMorph methodsFor: 'initialization' stamp: 'dgd 3/7/2003 15:07'!defaultBounds"answer the default bounds for the receiver"	^ 400 @ 100 extent: 200 @ 150! !!EToyChatMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:25'!defaultColor	"answer the default color/fill style for the receiver"	^ Color paleYellow! !!EToyChatMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 19:36'!initialize	"initialize the state of the receiver"	super initialize.	""	acceptOnCR _ true.	self listDirection: #topToBottom;		 layoutInset: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 rubberBandCells: false;		 minWidth: 200;		 minHeight: 200;		 rebuild ! !!EToyChatMorph class methodsFor: 'parts bin' stamp: 'RAA 8/20/2001 12:50'!descriptionForPartsBin	^ self partName: 	'Text chat'		categories:		#('Collaborative')		documentation:	'A tool for sending messages to other Squeak uers'! !!EToyFridgeMorph methodsFor: 'as yet unclassified' stamp: 'tk 7/25/2001 17:40'!rebuild	| row filler fudge people maxPerRow insetY |	updateCounter _ self class updateCounter.	self removeAllMorphs.	(self addARow: {		filler _ Morph new color: Color transparent; extent: 4@4.	}) vResizing: #shrinkWrap.	self addARow: {		(StringMorph contents: 'the Fridge') lock.		self groupToggleButton.	}.	row _ self addARow: {}.	people _ self class fridgeRecipients.	maxPerRow _ people size < 7 ifTrue: [2] ifFalse: [3].			"how big can this get before we need a different approach?"	people do: [ :each |		row submorphCount >= maxPerRow ifTrue: [row _ self addARow: {}].		row addMorphBack: (			groupMode ifTrue: [				(each userPicture scaledToSize: 35@35) asMorph lock			] ifFalse: [				each veryDeepCopy killExistingChat			]		)	].	fullBounds _ nil.	self fullBounds.	"htsBefore _ submorphs collect: [ :each | each height]."	fudge _ 20.	insetY _ self layoutInset.	insetY isPoint ifTrue: [insetY _ insetY y].	filler extent: 		4 @ (self height - filler height * 0.37 - insetY - borderWidth - fudge) truncated.	"self fixLayout.	htsAfter _ submorphs collect: [ :each | each height].	{htsBefore. htsAfter} explore."! !!EToyFridgeMorph methodsFor: 'as yet unclassified' stamp: 'nb 6/17/2003 12:25'!trulyFlashIndicator: aSymbol	| state |	state _ (self 		valueOfProperty: #fridgeFlashingState		ifAbsent: [false]) not.	self setProperty: #fridgeFlashingState toValue: state.	self 		addMouseActionIndicatorsWidth: 15 		color: (Color green alpha: (state ifTrue: [0.3] ifFalse: [0.7])). Beeper beep.	"self world displayWorldSafely."! !!EToyFridgeMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:34'!defaultBorderColor	"answer the default border color/fill style for the receiver"	^ #raised! !!EToyFridgeMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:37'!defaultBorderWidth	"answer the default border width for the receiver"	^ 4! !!EToyFridgeMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:25'!defaultColor	"answer the default color/fill style for the receiver"	^ Color paleRed! !!EToyFridgeMorph methodsFor: 'initialization' stamp: 'dgd 2/17/2003 19:58'!initialize	"initialize the state of the receiver"	super initialize.	""	groupMode _ true.	self listDirection: #topToBottom;		 layoutInset: 10;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 setProperty: #normalBorderColor toValue: self borderColor;		 setProperty: #flashingColors toValue: {Color red. Color yellow};		 rebuild! !!EToyFridgeMorph methodsFor: 'layout' stamp: 'RAA 3/7/2001 22:31'!acceptDroppingMorph: morphToDrop event: evt	| outData |	(morphToDrop isKindOf: NewHandleMorph) ifTrue: [		"don't send these"		^morphToDrop rejectDropMorphEvent: evt	].	self eToyRejectDropMorph: morphToDrop event: evt.		"we will keep a copy"	(morphToDrop isKindOf: EToySenderMorph) ifTrue: [		self class addRecipient: morphToDrop.		^self rebuild	].	self stopFlashing.	"7 mar 2001 - remove #veryDeepCopy"	outData _ morphToDrop eToyStreamedRepresentationNotifying: self.	self resetIndicator: #working.	self class fridgeRecipients do: [ :each |		self transmitStreamedObject: outData to: each ipAddress	].! !!EToyFridgeMorph class methodsFor: 'parts bin' stamp: 'RAA 8/20/2001 12:50'!descriptionForPartsBin	^ self partName: 	'Fridge'		categories:		#('Collaborative')		documentation:	'A tool for sending objects to other Squeak uers'! !!EToyGateKeeperMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:34'!defaultBorderColor	"answer the default border color/fill style for the receiver"	^ #raised! !!EToyGateKeeperMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:37'!defaultBorderWidth	"answer the default border width for the receiver"	^ 4! !!EToyGateKeeperMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:25'!defaultColor	"answer the default color/fill style for the receiver"	^ Color lightGray! !!EToyGateKeeperMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 19:42'!initialize	"initialize the state of the receiver"	super initialize.	""	self listDirection: #topToBottom;		 layoutInset: 4;		 hResizing: #spaceFill;		 vResizing: #spaceFill;		 useRoundedCorners;		 rebuild ! !!EToyGateKeeperMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 2/21/2001 11:57'!entryForIPAddress: ipAddressString	| known entry |	UpdateCounter _ self updateCounter + 1.	known _ self knownIPAddresses.	entry _ known at: ipAddressString ifAbsentPut: [		entry _ EToyGateKeeperEntry new.		entry ipAddress: ipAddressString.		entry	].	^entry! !!EToyListenerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 5/1/2002 17:57'!addNewObject: newObject thumbForm: aForm sentBy: senderName ipAddress: ipAddressString	| thumb row |	thumb _ aForm asMorph.	thumb setProperty: #depictedObject toValue: newObject.	row _ self addARow: {		thumb. 		self inAColumn: {			StringMorph new contents: senderName; lock.			StringMorph new contents: ipAddressString; lock.		}	}.	true ifTrue: [	"simpler protocol"		row on: #mouseUp send: #mouseUpEvent:for: to: self.	] ifFalse: [		row on: #mouseDown send: #mouseDownEvent:for: to: self.	].! !!EToyListenerMorph methodsFor: 'as yet unclassified' stamp: 'dgd 2/22/2003 18:59'!mouseDownEvent: event for: aMorph 	| menu selection depictedObject |	depictedObject := aMorph firstSubmorph valueOfProperty: #depictedObject.	menu := CustomMenu new.	menu		add: 'Grab' action: [event hand attachMorph: depictedObject veryDeepCopy];		add: 'Delete'			action: 				[self class removeFromGlobalIncomingQueue: depictedObject.				self rebuild].	selection := menu build startUpCenteredWithCaption: 'Morph from ' 						, (aMorph submorphs second) firstSubmorph contents.	selection ifNil: [^self].	selection value! !!EToyListenerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 5/1/2002 17:58'!mouseUpEvent: event for: aMorph	| depictedObject |	depictedObject _ aMorph firstSubmorph valueOfProperty: #depictedObject.	event hand attachMorph: depictedObject.	self class removeFromGlobalIncomingQueue: depictedObject.	self rebuild.! !!EToyListenerMorph methodsFor: 'as yet unclassified' stamp: 'RAA 5/1/2002 19:28'!rebuild	| earMorph |	updateCounter _ UpdateCounter.	self removeAllMorphs.	self addGateKeeperMorphs.	GlobalListener ifNil: [		earMorph _ (self class makeListeningToggleNew: false) asMorph.		earMorph setBalloonText: 'Click to START listening for messages'.		earMorph on: #mouseUp send: #startListening to: self.	] ifNotNil: [		earMorph _ (self class makeListeningToggleNew: true) asMorph.		earMorph setBalloonText: 'Click to STOP listening for messages'.		earMorph on: #mouseUp send: #stopListening to: self.	].	self addARow: {self inAColumn: {earMorph}}.	self		addARow: {			self inAColumn: {(StringMorph contents: 'Incoming communications') lock}.			self indicatorFieldNamed: #working color: Color blue help: 'working'.			self indicatorFieldNamed: #communicating color: Color green help: 'receiving'.		}.	"{thumbForm. newObject. senderName. ipAddressString}"	self class globalIncomingQueueCopy do: [ :each |		self			addNewObject: each second 			thumbForm: each first 			sentBy: each third 			ipAddress: each fourth.	].! !!EToyListenerMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:34'!defaultBorderColor	"answer the default border color/fill style for the receiver"	^ Color blue! !!EToyListenerMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:37'!defaultBorderWidth	"answer the default border width for the receiver"	^ 4! !!EToyListenerMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:25'!defaultColor	"answer the default color/fill style for the receiver"	^ Color lightBlue! !!EToyListenerMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 19:44'!initialize	"initialize the state of the receiver"	super initialize.	""	self listDirection: #topToBottom;		 layoutInset: 4;		 rebuild ! !!EToyListenerMorph class methodsFor: 'as yet unclassified' stamp: 'RAA 5/1/2002 19:29'!makeListeningToggleNew: activeMode	| background c baseExtent bgExtent botCent factor len endPts base |	factor _ 2.	bgExtent _ (50@25) * factor.	baseExtent _ (15@15) * factor.	background _ Form extent: bgExtent depth: 8.	botCent _ background boundingBox bottomCenter.	c _ background getCanvas."c fillColor: Color white."	base _  (botCent - (baseExtent // 2)) extent: baseExtent.	c		fillOval: base		color: Color black 		borderWidth: 0 		borderColor: Color black.	activeMode ifTrue: [		len _ background boundingBox height - 15.		endPts _ {botCent - (len@len). botCent - (len negated@len)}.		endPts do: [ :each |			c line: botCent to: each width: 2 color: Color black.		].		endPts do: [ :each |			#(4 8 12) do: [ :offset |				c frameOval: (each - offset corner: each + offset) color: Color red			].		].	]."background asMorph openInWorld."	^background	! !!EToyListenerMorph class methodsFor: 'as yet unclassified' stamp: 'sw 7/3/2001 21:54'!stopListening	GlobalListener ifNotNil:		[GlobalListener stopListening.		GlobalListener _ nil.		self bumpUpdateCounter]	"EToyListenerMorph stopListening"! !!EToyListenerMorph class methodsFor: 'class initialization' stamp: 'ads 7/18/2003 09:07'!unload	Smalltalk removeFromStartUpList: self.	Smalltalk removeFromShutDownList: self.! !!EToyListenerMorph class methodsFor: 'parts bin' stamp: 'RAA 8/20/2001 12:51'!descriptionForPartsBin	^ self partName: 	'Listener'		categories:		#('Collaborative')		documentation:	'A tool for receiving things from other Squeak uers'! !!EToyMorphsWelcomeMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:25'!defaultColor	"answer the default color/fill style for the receiver"	^ Color yellow! !!EToyMorphsWelcomeMorph methodsFor: 'initialization' stamp: 'nk 7/12/2003 08:58'!initialize	"initialize the state of the receiver"	| earMorph |	super initialize.	""		self layoutInset: 8 @ 8.	"earMorph _ (EToyListenerMorph makeListeningToggle: true)  	asMorph."	earMorph _ TextMorph new contents: 'Morphswelcomehere';				 fontName: Preferences standardEToysFont familyName size: 18;				 centered;				 lock.	self addARow: {earMorph}.	self setBalloonText: 'My presence in this world means received morphs may appear automatically'! !!EToyMorphsWelcomeMorph class methodsFor: 'parts bin' stamp: 'RAA 8/20/2001 12:52'!descriptionForPartsBin	^ self partName: 	'Welcome'		categories:		#('Collaborative')		documentation:	'A sign that you accept morphs dropped directly into your world'! !!EToyMultiChatMorph class methodsFor: 'parts bin' stamp: 'RAA 1/28/2002 15:32'!descriptionForPartsBin	^ self partName: 	'Text chat+'		categories:		#('Collaborative')		documentation:	'A tool for sending messages to several Squeak users at once'		sampleImageForm: (Form	extent: 25@25	depth: 16	fromArray: #( 1177640695 1593270007 1593270007 1593270007 1593270007 1593270007 1593270007 1593270007 1593270007 1593270007 1593270007 1593270007 1593245696 1593263665 1593270007 1593270007 1593270007 1177634353 1177628012 1177628012 1177640695 1593270007 1593270007 1593278463 2147450879 1316159488 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593274233 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1731723264 1593257324 762064236 762064236 762064236 762064236 762057894 762057894 762064236 762064236 762064236 762064236 762064236 1177616384 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593278459 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 2147188731 1870200832 1593274233 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1870229369 1731723264)	offset: 0@0)! !!EToySenderMorph methodsFor: 'as yet unclassified' stamp: 'nk 6/12/2004 09:23'!fixOldVersion	| uName uForm uEmail uIP |	uName _ self userName.	uForm _ userPicture ifNil: [		(self 		findDeepSubmorphThat: [ :x | (x isKindOf: ImageMorph) or: [x isSketchMorph]] 		ifAbsent: [self halt]) form.	].	uEmail _ (fields at: #emailAddress) contents.	uIP _ self ipAddress.	self		userName: uName 		userPicture: (uForm scaledToSize: 61@53)		userEmail: uEmail 		userIPAddress: uIP! !!EToySenderMorph methodsFor: 'as yet unclassified' stamp: 'aoy 2/15/2003 20:59'!startAudioChat: toggleMode 	| chat r |	(self valueOfProperty: #embeddedAudioChatHolder) ifNotNil: 			[toggleMode ifFalse: [^self].			^self killExistingChat].	chat := AudioChatGUI new ipAddress: self ipAddress.	(self ownerThatIsA: EToyFridgeMorph) isNil 		ifTrue: 			[chat				removeConnectButton;				vResizing: #shrinkWrap;				hResizing: #shrinkWrap;				borderWidth: 2.	"we already know the connectee"			r := (self addARow: { 								chat}) vResizing: #shrinkWrap.			self world startSteppingSubmorphsOf: chat.			self setProperty: #embeddedAudioChatHolder toValue: r.			self				hResizing: #shrinkWrap;				vResizing: #shrinkWrap]		ifFalse: 			[chat openInWorld: self world]! !!EToySenderMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/20/2001 13:03'!userName	^ (self 		findDeepSubmorphThat: [ :x | x isKindOf: StringMorph] 		ifAbsent: [^nil]) contents! !!EToySenderMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:34'!defaultBorderColor	"answer the default border color/fill style for the receiver"	^ Color magenta! !!EToySenderMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:37'!defaultBorderWidth	"answer the default border width for the receiver"	^ 4! !!EToySenderMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:26'!defaultColor	"answer the default color/fill style for the receiver"	^ Color lightMagenta! !!EToySenderMorph methodsFor: 'initialization' stamp: 'dgd 2/17/2003 19:58'!initialize	"initialize the state of the receiver"	Socket initializeNetwork.	"we may want our IP address"	Preferences defaultAuthorName.	"seems like a good place to insure we have a name"	super initialize.	""	self listDirection: #topToBottom;		 layoutInset: 4;		 setProperty: #normalBorderColor toValue: self borderColor;		 setProperty: #flashingColors toValue: {Color red. Color yellow}! !!EToySenderMorph methodsFor: 'layout' stamp: 'RAA 3/7/2001 22:31'!acceptDroppingMorph: morphToDrop event: evt	| myCopy outData |	(morphToDrop isKindOf: NewHandleMorph) ifTrue: [			"don't send these"		^morphToDrop rejectDropMorphEvent: evt.	].	self eToyRejectDropMorph: morphToDrop event: evt.		"we don't really want it"	"7 mar 2001 - remove #veryDeepCopy"	myCopy _ morphToDrop.	"gradient fills require doing this second"	myCopy setProperty: #positionInOriginatingWorld toValue: morphToDrop position.	self stopFlashing.	outData _ myCopy eToyStreamedRepresentationNotifying: self.	self resetIndicator: #working.	self transmitStreamedObject: outData to: self ipAddress.! !!EToySenderMorph methodsFor: 'parts bin' stamp: 'RAA 8/20/2001 13:08'!initializeToStandAlone	super initializeToStandAlone.	self installModelIn: ActiveWorld.! !!EToySenderMorph class methodsFor: 'parts bin' stamp: 'RAA 12/18/2001 10:05'!descriptionForPartsBin	^ self partName: 	'Badge'		categories:		#('Collaborative')		documentation:	'A tool for collaborating with other Squeak users'		sampleImageForm: (Form	extent: 66@72	depth: 16	fromArray: #( 7175 1545042975 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082429975 470220800 470252575 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082413575 1545042975 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082429975 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 1582767304 1032871511 2134867775 2134842568 2134867775 2134867775 2134867775 1032879935 2134867775 2134867775 2134867775 2134867775 1582792511 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134842568 1032871511 1032863120 1582775696 1032871511 2134867775 2134867775 1032871511 2134842568 1032863120 482885008 1032879935 482901823 482885008 1032879935 1032863120 1032879935 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134850960 2134850960 1032879935 1032863120 2134850960 2134867775 2134859351 482876616 2134850960 2134867775 1032879935 1032879935 1032879935 1032879935 1032879935 1032863120 1582792511 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 1582767304 1032871511 1032863120 1582775696 1032871511 2134867775 2134842568 1582767304 1582767304 1582792511 482893399 482893399 482893399 482893399 482893399 1032863120 1582792511 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 1032863120 1032879935 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 65537 65537 65537 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134835201 65537 1032863120 1032863120 98111 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134835201 81296 2134867775 2134867775 1032847361 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134850960 1032879935 2134867775 2134867775 2134835201 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134835201 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 65537 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134835201 81296 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 65537 98111 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134835201 65537 1032879935 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 65537 81296 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 65537 1032879935 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134850960 81296 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134835201 1032879935 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134835201 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134850960 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134850960 1032879935 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134835201 98111 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134850960 1032879935 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141159423 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2141159231 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141159423 2147450879 2147450879 1039171583 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 1039171583 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2141159231 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141142512 1039154672 1593270007 1039163127 1593278463 1593261552 2147442423 1039154672 2147433968 1039154672 1593270007 1039163127 1593278463 1593261552 2147442423 1593270007 1593261552 2147450879 2147442423 1593270007 2147442423 1039171583 484990711 2141159231 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141150967 1039163127 1039171583 1039163127 1039171583 1039171583 1039154672 1039154672 1039163127 1039163127 1039171583 1039163127 1039171583 484982256 1039146216 1593270007 484982256 1039171583 2147425512 1593261552 2147425512 1039154672 1039171583 2141159231 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141159423 1039154672 1593278463 1039171583 1039171583 1039171583 1039154672 1039146216 1593278463 1039154672 1593278463 1039171583 1039171583 1039171583 1593261552 2147450879 1039171583 1593270007 2147433968 2147433968 2147433968 2147442423 1039171583 2141159231 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141159423 1593270007 2147450879 1039163127 1039163127 1593261552 2147442423 1039163127 2147450879 1593270007 2147450879 1039163127 1039163127 1593261552 2147433968 1593278463 1593261552 2147442423 2147433968 1593261552 1593270007 1039171583 2147442423 2141159231 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141159423 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2141159231 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141159423 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450783 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141150967 1039171583 1593261552 2147442423 1039171583 2147450879 2147442423 2147450879 1593278463 1593261552 2147450879 2147442423 1039171583 2147442423 2147450879 2147442423 1039171583 2147442423 2147450783 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141150967 2147433968 1039171583 1039154672 2147433968 2147450879 1593261552 2147442423 1039171583 1593278463 1039171583 2147433968 2147433968 1593261552 2147450879 2147442423 2147433968 1593261552 2147450783 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141159423 1039171583 1039171583 1039154672 1039154672 2147450879 2147433968 2147425512 484990711 2147433968 1593278463 2147433968 1039154672 2147433968 2147450879 2147450879 1039163127 484973800 1593278367 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141142512 2147442423 1039171583 1039171583 1593270007 1593278463 2147433968 2147450879 1039171583 2147450879 1039163127 2147450879 1593270007 2147433968 2147442423 2147450879 2147433968 2147433968 2147450783 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141142512 1039163127 1593261552 2147442423 1593278463 1593278463 1593261552 2147450879 1039163127 1593261552 2147442423 2147442423 1593278463 1593261552 2147442423 2147442423 1039171583 2147433968 1593278367 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2141159423 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450879 2147450783 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134861595 1391951679 2134867775 2134867775 2134856439 1729855295 2134867775 2134867775 1729849115 2134867775 2134867775 2134861595 1729855295 2134867775 2134867775 1729843959 1391951679 2134867775 2134867775 2134856439 1729855295 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 1326930843 1879001943 1729855295 2134861595 1398112251 1738035990 2134867775 2134855446 1536646039 1326874431 2134867775 1387357800 1718112945 2134867775 2134856463 1736736736 2145407816 1729855295 2134861595 1398243327 1738232599 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 1032863120 1032879935 2134867775 1032863120 1032879935 2134856439 1879011327 1879011327 1264025407 2134856533 2147188731 2147188731 1391951679 1391947770 1878683642 1878676215 2134856439 2120646246 2120646246 1391951679 1391951840 2145419232 2145419232 1397260095 2134856535 2147450879 2147450879 1391951679 2134867775 2082438175 2082438175 2134867775 2134842568 1507359 1514696 2134842568 48235488 48241864 2134854487 1391932912 904949759 1879003895 1391951867 484908263 1039040507 1398112063 1263890426 904753146 1878674261 2134856331 2120629539 1025736294 1384873791 1397260256 2145402336 2145419232 2145407735 1391951871 1039154672 1039171583 1398243135 2134867775 2082438175 2082438175 2134867775 2134835216 2031647 2031632 2134835680 65012704 65012192 2134854487 904949759 1879011327 1879003895 1391951867 2147171822 2147188731 1398112063 1263890426 904753146 1878674261 2134856331 2120646246 1025736294 1384873791 1397260256 1591754208 2145419232 2145407735 1391951871 1039163127 2147450879 1398243135 2134867775 2082438175 2082438175 2134867775 2134835216 2031647 2031632 2134835680 65012704 65012192 2134854487 904949759 1879011327 1879003895 1391951867 2147171822 2147188731 1398112063 1263890426 904753146 1878674261 2134856331 2120629539 2120646246 1384873791 1397260256 484449504 1591771104 2145407735 1391951871 2147442423 1593278463 1398243135 2134867775 2082438175 2082438175 2134867775 2134842568 1507359 1514696 2134842568 48235488 48241864 2134854487 1391932912 904949759 1879003895 1391951867 1593056487 2147188731 1398112063 1263890426 1391685626 1878674261 2134856331 2120637892 2120646246 1384873791 1397251808 484466400 484474848 2145407735 1391951871 484982256 1593278463 1398243135 2134867775 2082438175 2082438175 2134867775 2134867775 1032863120 1032879935 2134867775 1032863120 1032879935 2134855447 1879011327 1879011327 1536911131 1729849240 2147188731 2147188731 1393983295 1326870522 1878683642 1878675222 2134856369 2120646246 2120646246 1387364159 1393524704 2145419232 2145419232 1736730395 1729849243 2147450879 2147450879 1394048831 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134861595 1536913407 1879011327 1326939967 2134856470 2147188731 2147182488 1729855295 1729846167 1878683642 1536648987 2134861595 1718124134 2120640104 1729855295 1729849220 2145419232 2145419232 1393524543 2134856471 2147450879 2147444635 1729855295 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 1729842967 1264014071 2134867775 2134867775 1391940437 1393977115 2134867775 2134861595 1326862102 1729855295 2134867775 1729843889 1387357979 2134867775 2134861595 1393513288 1397248759 2134867775 2134867775 1391940439 1394042651 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 2082438175 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082438175 1545042975 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2134867775 2082429975 470252575 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082413575 7175 1545042975 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082438175 2082429975 470220800)	offset: 0@0)! !!GeePrinterDialogMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/22/2001 07:36'!getChoice: aSymbol	aSymbol == #landscapeFlag ifTrue: [^printSpecs landscapeFlag].	aSymbol == #drawAsBitmapFlag ifTrue: [^printSpecs drawAsBitmapFlag].	aSymbol == #scaleToFitPage ifTrue: [^printSpecs scaleToFitPage].! !!GeePrinterDialogMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/22/2001 07:51'!rebuild	self removeAllMorphs.	self addARow: {		(StringMorph contents: 'PostScript Printing Options') lock.	}.	self addARow: {		self			simpleToggleButtonFor: self			attribute: #landscapeFlag			help: 'Print in landscape mode'.		(StringMorph contents: ' Landscape') lock.	}.	self addARow: {		self			simpleToggleButtonFor: self			attribute: #drawAsBitmapFlag			help: 'Print as a bitmap'.		(StringMorph contents: ' Bitmap') lock.	}.	self addARow: {		self			simpleToggleButtonFor: self			attribute: #scaleToFitPage			help: 'Scale printing to fill page'.		(StringMorph contents: ' Scale to fit') lock.	}.	self addARow: {		self printButton.		self previewButton.		self cancelButton.	}.! !!GeePrinterDialogMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/22/2001 07:50'!toggleChoice: aSymbol	aSymbol == #landscapeFlag ifTrue: [		printSpecs landscapeFlag: printSpecs landscapeFlag not	].	aSymbol == #drawAsBitmapFlag ifTrue: [		printSpecs drawAsBitmapFlag: printSpecs drawAsBitmapFlag not	].	aSymbol == #scaleToFitPage ifTrue: [		printSpecs scaleToFitPage: printSpecs scaleToFitPage not	].! !!GeePrinterDialogMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:34'!defaultBorderColor	"answer the default border color/fill style for the receiver"	^ self color darker! !!GeePrinterDialogMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:38'!defaultBorderWidth	"answer the default border width for the receiver"	^ 8! !!GeePrinterDialogMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:27'!defaultColor	"answer the default color/fill style for the receiver"	^ Color paleYellow! !!GeePrinterDialogMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 19:52'!initialize	"initialize the state of the receiver"	super initialize.	""	self vResizing: #shrinkWrap;		 hResizing: #shrinkWrap;		 layoutInset: 4;		 useRoundedCorners.	printSpecs		ifNil: [printSpecs _ PrintSpecifications defaultSpecs].	self rebuild ! !!GeePrinterDialogMorph class methodsFor: 'new-morph participation' stamp: 'RAA 2/22/2001 09:08'!includeInNewMorphMenu	^ false! !!InternalThreadNavigationMorph methodsFor: 'initialization' stamp: 'dgd 11/29/2003 17:35'!addButtons	| marginPt i sz data images pageNumber f m b1 b2 dot arrowWidth arrowCenter vertices arrowHeight nameMorph sizeRatio controlsColor |	sizeRatio _ self sizeRatio.	controlsColor _ Color orange lighter.	self changeNoLayout.	self hResizing: #rigid.	self vResizing: #rigid.	marginPt _ (4 @ 4 * sizeRatio) rounded..	i _ self currentIndex.	sz _ self myThumbnailSize.	arrowWidth _ (14 * sizeRatio) rounded.	arrowHeight _ (14 * sizeRatio) rounded.	data _ {		{i - 1. 'Previous:'. #previousPage. #leftCenter. arrowWidth. 'Prev'}.		{i + 1. 'Next:'. #nextPage. #rightCenter. arrowWidth negated. 'Next'}	}.	images _ data collect: [ :tuple |		pageNumber _ tuple first.		(pageNumber between: 1 and: listOfPages size) ifTrue: [			f _ self 				makeThumbnailForPageNumber: pageNumber 				scaledToSize: sz 				default: tuple sixth.			f _ f deepCopy.		"we're going to mess it up"			arrowCenter _ f boundingBox perform: tuple fourth.			vertices _ {				arrowCenter + (tuple fifth @ arrowHeight negated).				arrowCenter + (tuple fifth @ arrowHeight).				arrowCenter.			}.			f getCanvas				drawPolygon: vertices 				color: controlsColor				borderWidth: 0 				borderColor: Color transparent.			m _ ImageMorph new image: f.			m setBalloonText: tuple second translated,' ',(listOfPages at: pageNumber) first.			m addMouseUpActionWith: (				MessageSend receiver: self selector: tuple third			).		] ifFalse: [			f _ (Form extent: sz depth: 16) fillColor: Color lightGray.			m _ ImageMorph new image: f.		].		m	].	b1 _ images first.	b2 _ images second.	dot _ EllipseMorph new extent: (18@18 * sizeRatio) rounded; color: controlsColor; borderWidth: 0.	self addMorph: (b1 position: self position + marginPt).	self addMorph: (b2 position: b1 topRight + (marginPt x @ 0)).	self extent: (b1 bottomRight max: b2 bottomRight) - self position + marginPt.	self addMorph: dot.	dot align: dot center with: b1 bounds rightCenter + ((marginPt x @ 0) // 2).	dot setBalloonText: threadName,'more commands'.	dot on: #mouseDown send: #moreCommands to: self.	self fullBounds.	self addMorph: (nameMorph _ SquishedNameMorph new).	nameMorph		target: self getSelector: #threadName setSelector: nil;		color: Color transparent;		width: self width;		height: (15 * sizeRatio) rounded;		align: nameMorph bottomLeft with: self bottomLeft.! !!InternalThreadNavigationMorph methodsFor: 'initialization' stamp: 'dgd 10/26/2003 19:06'!defaultColor	"answer the default color/fill style for the receiver"	^(Color r: 0.27 g: 0.634 b: 0.365) alpha: 0.5! !!InternalThreadNavigationMorph methodsFor: 'initialization' stamp: 'dgd 9/19/2003 15:30'!ensureSuitableDefaults	listOfPages ifNil: [		listOfPages _ Project allMorphicProjects collect: [ :each | {each name}].		threadName _ 'all (default)' translated.		self class know: listOfPages as: threadName.	].	currentIndex ifNil: [currentIndex _ 0].! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'sw 3/3/2004 16:58'!destroyThread
	"Manually destroy the thread"

	(self confirm: ('Destroy thread <{1}> ?' translated format:{threadName})) ifFalse: [^ self].
	self class knownThreads removeKey: threadName ifAbsent: [].
	self setProperty: #moribund toValue: true.  "In case pointed to in some other project"
	ActiveWorld keyboardNavigationHandler == self ifTrue:
		[self stopKeyboardNavigation]. 
	self delete! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'RAA 2/4/2001 11:41'!editThisThread	| sorter |	sorter _ ProjectSorterMorph new.	sorter navigator: self listOfPages: listOfPages.	self currentWorld addMorphFront: sorter.	sorter align: sorter center with: self currentWorld center.	self delete.! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'RAA 8/15/2001 12:00'!insertNewProject	| newProj |	[newProj _ Project newMorphicOn: nil.]		on: ProjectViewOpenNotification		do: [ :ex | ex resume: false].		EToyProjectDetailsMorph 		getFullInfoFor: newProj		ifValid: [self insertNewProjectActionFor: newProj]		expandedFormat: false.! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'RAA 8/15/2001 12:00'!insertNewProjectActionFor: newProj	| me |	me _ CurrentProjectRefactoring currentProjectName.	listOfPages withIndexDo: [ :each :index |		each first = me ifTrue: [			listOfPages add: {newProj name} afterIndex: index.			^self switchToThread: threadName.		].	].	listOfPages add: {newProj name} afterIndex: listOfPages size.	^self switchToThread: threadName		! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'dgd 9/19/2003 15:33'!jumpWithinThread	| aMenu me weHaveOthers myIndex |	me _ CurrentProjectRefactoring currentProjectName.	aMenu _ MenuMorph new defaultTarget: self.	weHaveOthers _ false.	myIndex _ self currentIndex.	listOfPages withIndexDo: [ :each :index |		index = myIndex ifTrue: [			aMenu add: 'you are here' translated action: #yourself.			aMenu lastSubmorph color: Color red.		] ifFalse: [			weHaveOthers _ true.			aMenu add: ('jump to <{1}>' translated format:{each first}) selector: #jumpToIndex: argument: index.			myIndex = (index - 1) ifTrue: [				aMenu lastSubmorph color: Color blue			].			myIndex = (index + 1) ifTrue: [				aMenu lastSubmorph color: Color orange			].		].	].	weHaveOthers ifFalse: [^self inform: 'This is the only project in this thread' translated].	aMenu popUpEvent: self world primaryHand lastEvent in: self world! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'dgd 4/4/2004 21:33'!moreCommands	"Put up a menu of options"	| allThreads aMenu others target |	allThreads _ self class knownThreads.	aMenu _ MenuMorph new defaultTarget: self.	aMenu addTitle: 'navigation' translated.	aMenu addStayUpItem.	self flag: #deferred.  "Probably don't want that stay-up item, not least because the navigation-keystroke stuff is not dynamically handled"	others _ (allThreads keys reject: [ :each | each = threadName]) asSortedCollection.	others do: [ :each |		aMenu add: ('switch to <{1}>' translated format:{each}) selector: #switchToThread: argument: each].	aMenu addList: {		{'switch to recent projects' translated.  #getRecentThread}.		#-.		{'create a new thread' translated.  #threadOfNoProjects}.		{'edit this thread' translated.  #editThisThread}.		{'create thread of all projects' translated.  #threadOfAllProjects}.		#-.		{'First project in thread' translated.  #firstPage}.		{'Last project in thread' translated.  #lastPage}}.	(target _ self currentIndex + 2) > listOfPages size ifFalse:		[aMenu 			add: ('skip over next project ({1})' translated format:{(listOfPages at: target - 1) first})			action: #skipOverNext].	aMenu addList: {		{'jump within this thread' translated.  #jumpWithinThread}.		{'insert new project' translated.  #insertNewProject}.		#-.		{'simply close this navigator' translated.  #delete}.		{'destroy this thread' translated. #destroyThread}.		#-}.	(ActiveWorld keyboardNavigationHandler == self)		ifFalse:			[aMenu add: 'start keyboard navigation with this thread' translated action: #startKeyboardNavigation]		ifTrue:			[aMenu add: 'stop keyboard navigation with this thread' translated action: #stopKeyboardNavigation].	aMenu popUpInWorld! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'dgd 11/29/2003 17:36'!myThumbnailSize	^ (52 @ 39 * self sizeRatio) rounded! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'RAA 6/1/2001 13:37'!positionAppropriately	| others otherRects overlaps |	(self ownerThatIsA: HandMorph) ifNotNil: [^self].	others _ self world submorphs select: [ :each | each ~~ self and: [each isKindOf: self class]].	otherRects _ others collect: [ :each | each bounds].	self align: self fullBounds bottomRight with: self world bottomRight.	self setProperty: #previousWorldBounds toValue: self world bounds.	[		overlaps _ false.		otherRects do: [ :r |			(r intersects: bounds) ifTrue: [overlaps _ true. self bottom: r top].		].		self top < self world top ifTrue: [			self bottom: self world bottom.			self right: self left - 1.		].		overlaps	] whileTrue.! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'nb 6/17/2003 12:25'!skipOverNext		| target |	(target _ self currentIndex + 2) > listOfPages size ifTrue: [^Beeper beep].	currentIndex _ target.	self loadPageWithProgress.! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'sw 3/18/2003 23:12'!startKeyboardNavigation
	"Tell the active world to starting navigating via desktop keyboard navigation via me"

	ActiveWorld keyboardNavigationHandler: self! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'sw 3/18/2003 23:09'!stopKeyboardNavigation
	"Cease navigating via the receiver in response to desktop keystrokes"

	ActiveWorld removeProperty: #keyboardNavigationHandler! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'RAA 2/24/2001 13:15'!threadName: aString index: anInteger	threadName _ aString.	preferredIndex _ anInteger.	self currentIndex.! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'RAA 2/24/2001 13:15'!threadOfAllProjects	| nameList nav |	nameList _ Project allMorphicProjects collect: [ :each | {each name}].	nav _ self class basicNew.	nav		listOfPages: nameList;		threadName: '' index: nil;		initialize.	nav editThisThread.! !!InternalThreadNavigationMorph methodsFor: 'navigation' stamp: 'RAA 2/24/2001 13:15'!threadOfNoProjects	| nameList nav |	nameList _ { {CurrentProjectRefactoring currentProjectName} }.	nav _ self class basicNew.	nav		listOfPages: nameList;		threadName: '' index: nil;		initialize.	nav editThisThread.! !!InternalThreadNavigationMorph methodsFor: 'sorting' stamp: 'dgd 9/19/2003 15:27'!acceptSortedContentsFrom: aHolder	"Update my page list from the given page sorter."	| nameOfThisProject cachedData proj |	threadName isEmpty ifTrue: [threadName _ 'I need a name' translated].	threadName _ FillInTheBlank 		request: 'Name this thread.' translated 		initialAnswer: threadName.	threadName isEmptyOrNil ifTrue: [^self].	listOfPages _ OrderedCollection new.	aHolder submorphs doWithIndex: [:m :i |		(nameOfThisProject _ m valueOfProperty: #nameOfThisProject) ifNotNil: [			cachedData _ {nameOfThisProject}.			proj _ Project named: nameOfThisProject.			(proj isNil or: [proj thumbnail isNil]) ifFalse: [				cachedData _ cachedData, {proj thumbnail scaledToSize: self myThumbnailSize}.			].			listOfPages add: cachedData.		].	].	self class know: listOfPages as: threadName.	self removeAllMorphs; addButtons.	self world ifNil: [		self openInWorld; positionAppropriately.	].! !!InternalThreadNavigationMorph methodsFor: 'sorting' stamp: 'RAA 2/4/2001 09:38'!makeThumbnailForPageNumber: pageNumber scaledToSize: sz default: aString	| cachedData proj tn label |	cachedData _ listOfPages at: pageNumber.	proj _ Project named: cachedData first.	(proj isNil or: [proj thumbnail isNil]) ifTrue: [		cachedData size >= 2 ifTrue: [^cachedData second].		tn _ Form extent: sz depth: 8.		tn fillColor: Color veryLightGray.		label _ (StringMorph contents: aString) imageForm.		label displayOn: tn at: tn center - (label extent // 2) rule: Form paint.		^tn	].	tn _ proj thumbnail  scaledToSize: sz.	cachedData size < 2 ifTrue: [		cachedData _ cachedData,#(0).		listOfPages at: pageNumber put: cachedData.	].	cachedData at: 2 put: tn.	^tn! !!InternalThreadNavigationMorph methodsFor: 'stepping' stamp: 'RAA 6/1/2001 13:36'!step	super step.	(self valueOfProperty: #previousWorldBounds) = self world bounds ifFalse: [		self positionAppropriately.	].	self class knownThreads		at: threadName		ifPresent: [ :known |			known == listOfPages ifFalse: [				listOfPages _ known.				self removeAllMorphs.				self addButtons.			].		].! !!InternalThreadNavigationMorph methodsFor: 'piano rolls' stamp: 'md 10/22/2003 15:25'!triggerActionFromPianoRoll	| proj |	WorldState addDeferredUIMessage: 			[self currentIndex >= listOfPages size 				ifTrue: [Beeper beep]				ifFalse: 					[currentIndex := self currentIndex + 1.					proj := Project named: ((listOfPages at: currentIndex) first).					proj world setProperty: #letTheMusicPlay toValue: true.					proj enter]]! !!InternalThreadNavigationMorph methodsFor: 'private' stamp: 'dgd 10/26/2003 19:37'!currentIndex	| currentName |	currentName _ CurrentProjectRefactoring currentProjectName.	listOfPages withIndexDo: [ :each :index |		(each first = currentName and: [preferredIndex = index]) ifTrue: [^currentIndex _ index]	].	listOfPages withIndexDo: [ :each :index |		each first = currentName ifTrue: [^currentIndex _ index]	].		currentIndex isNil		ifTrue: [^ 1].	^ currentIndex min: listOfPages size! !!InternalThreadNavigationMorph methodsFor: 'private' stamp: 'sw 3/3/2004 17:03'!loadPageWithProgress
	"Load the desired page, showing a progress indicator as we go"
	
	| projectInfo projectName beSpaceHandler |
	projectInfo _ listOfPages at: currentIndex.
	projectName _ projectInfo first.
	loadedProject _ Project named: projectName.
	self class know: listOfPages as: threadName.
	beSpaceHandler _ (ActiveWorld keyboardNavigationHandler == self).
	WorldState addDeferredUIMessage:
		[InternalThreadNavigationMorph openThreadNamed: threadName atIndex: currentIndex beKeyboardHandler: beSpaceHandler] fixTemps.

	loadedProject ifNil: [
		ComplexProgressIndicator new 
			targetMorph: self;
			historyCategory: 'project loading' translated;
			withProgressDo: [
				[
					loadedProject _ CurrentProjectRefactoring 
							currentFromMyServerLoad: projectName
				] 
					on: ProjectViewOpenNotification
					do: [ :ex | ex resume: false]		
						"we probably don't want a project view morph in this case"
			].
	].
	loadedProject ifNil: [
		^self inform: 'I cannot find that project' translated
	].
	self delete.

	loadedProject enter.
! !!InternalThreadNavigationMorph methodsFor: 'accessing' stamp: 'dgd 11/29/2003 17:35'!sizeRatio	"answer the size ratio for the receiver"		^ Preferences standardMenuFont height / 12! !!InternalThreadNavigationMorph class methodsFor: 'thumbnails' stamp: 'RAA 5/10/2001 17:06'!cacheThumbnailFor: aProject	| form |	CachedThumbnails ifNil: [CachedThumbnails _ Dictionary new].	CachedThumbnails		at: aProject name		put: (form _ self sorterFormForProject: aProject sized: nil).	^form	! !!InternalThreadNavigationMorph class methodsFor: 'thumbnails' stamp: 'RAA 5/10/2001 17:09'!clearThumbnailCache	CachedThumbnails _ nil! !!InternalThreadNavigationMorph class methodsFor: 'thumbnails' stamp: 'RAA 5/10/2001 17:07'!getThumbnailFor: aProject	CachedThumbnails ifNil: [CachedThumbnails _ Dictionary new].	^CachedThumbnails		at: aProject name		ifAbsentPut: [self sorterFormForProject: aProject sized: nil]! !!InternalThreadNavigationMorph class methodsFor: 'parts bin' stamp: 'sw 8/19/2001 21:15'!descriptionForPartsBin	^ self partName: 	'ThreadNavigator'		categories:		#('Navigation')		documentation:	'A tool that lets you navigate through a thread of projects.'! !!InternalThreadNavigationMorph class methodsFor: 'known threads' stamp: 'RAA 2/24/2001 13:10'!openThreadNamed: nameOfThread atIndex: anInteger	| coll nav |	coll _ self knownThreads at: nameOfThread ifAbsent: [^self].	nav _ World 		submorphThat: [ :each | (each isKindOf: self) and: [each threadName = nameOfThread]]		ifNone: [			nav _ self basicNew.			nav				listOfPages: coll;				threadName: nameOfThread index: anInteger;				initialize;				openInWorld;				positionAppropriately.			^self		].	nav		listOfPages: coll;		threadName: nameOfThread index: anInteger;		removeAllMorphs;		addButtons.! !!InternalThreadNavigationMorph class methodsFor: 'known threads' stamp: 'sw 3/18/2003 23:12'!openThreadNamed: nameOfThread atIndex: anInteger beKeyboardHandler: aBoolean
	"Activate the thread of the given name, from the given index; set it up to be navigated via desktop keys if indicated"

	| coll nav |

	coll _ self knownThreads at: nameOfThread ifAbsent: [^self].
	nav _ World 
		submorphThat: [ :each | (each isKindOf: self) and: [each threadName = nameOfThread]]
		ifNone:
			[nav _ self basicNew.
			nav
				listOfPages: coll;
				threadName: nameOfThread index: anInteger;
				initialize;
				openInWorld;
				positionAppropriately.
			aBoolean ifTrue: [ActiveWorld keyboardNavigationHandler: nav].
			^ self].
	nav
		listOfPages: coll;
		threadName: nameOfThread index: anInteger;
		removeAllMorphs;
		addButtons.
	aBoolean ifTrue: [ActiveWorld keyboardNavigationHandler: nav]

! !!InternalThreadNavigationMorph class methodsFor: 'sorter' stamp: 'RAA 5/10/2001 17:04'!sorterFormForProject: aProject sized: ignored	^(ProjectViewMorph on: aProject) imageForm scaledToSize: 80@60.! !!KidNavigationMorph methodsFor: 'accessing' stamp: 'dgd 8/31/2003 18:39'!balloonText	^ ((mouseInside			ifNil: [false])		ifTrue: ['Click here to see FEWER buttons.']		ifFalse: ['Click here to see MORE buttons.'])  translated! !!KidNavigationMorph methodsFor: 'as yet unclassified' stamp: 'nk 7/12/2003 08:46'!fontForButtons	^Preferences standardEToysFont! !!KidNavigationMorph methodsFor: 'initialization' stamp: 'dgd 3/7/2003 15:35'!defaultColor	"answer the default color/fill style for the receiver"	| result |	result _ GradientFillStyle ramp: {0.0					-> (Color							r: 0.032							g: 0.0							b: 0.484). 1.0					-> (Color							r: 0.194							g: 0.032							b: 1.0)}.	result origin: self bounds topLeft.	result direction: 0 @ 200.	result radial: false.	^ result! !!KidNavigationMorph methodsFor: 'initialization' stamp: 'dgd 3/7/2003 15:35'!initialize	"initialize the state of the receiver"	| |	super initialize.	""	self layoutInset: 12.	self removeAllMorphs.	self addButtons! !!NebraskaNavigationMorph methodsFor: 'as yet unclassified' stamp: 'yo 11/4/2002 21:06'!fontForButtons	^ TextStyle defaultFont.	"^Preferences standardButtonFont"! !!NebraskaNavigationMorph methodsFor: 'initialization' stamp: 'dgd 2/16/2003 14:11'!defaultColor	"answer the default color/fill style for the receiver"	^ Color yellow ! !!NebraskaServerMorph methodsFor: 'accessing' stamp: 'RAA 5/31/2001 15:03'!currentBacklogString	^currentBacklogString! !!NebraskaServerMorph methodsFor: 'drawing' stamp: 'yo 7/2/2004 18:39'!updateCurrentStatusString	self server ifNil:[		currentStatusString _ '<Nebraska not active>' translated.		currentBacklogString _ ''.	] ifNotNil:[		currentStatusString _ 			' Nebraska: ' translated, 			self server numClients printString, 			' clients' translated.		currentBacklogString _ 'backlog: ' translated,				((previousBacklog _ self server backlog) // 1024) printString,'k'	].! !!NebraskaServerMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:29'!defaultColor	"answer the default color/fill style for the receiver"	^ Color white! !!NebraskaServerMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 21:29'!initialize	"initialize the state of the receiver"	super initialize.	""	fullDisplay _ false.		lastFullUpdateTime _ 0.	self listDirection: #topToBottom;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap! !!NebraskaServerMorph methodsFor: 'initialization' stamp: 'yo 7/2/2004 18:38'!rebuild	| myServer toggle closeBox font |	font _ StrikeFont familyName: #Palatino size: 14.	self removeAllMorphs.	self setColorsAndBorder.	self updateCurrentStatusString.	toggle _ SimpleHierarchicalListMorph new perform: (		fullDisplay ifTrue: [#expandedForm] ifFalse: [#notExpandedForm]	).	closeBox _ SimpleButtonMorph new borderWidth: 0;			label: 'X' font: Preferences standardButtonFont; color: Color transparent;			actionSelector: #delete; target: self; extent: 14@14;			setBalloonText: 'End Nebrasks session'.	self addARow: {		self inAColumn: {closeBox}.		self inAColumn: {			UpdatingStringMorph new				useStringFormat;				target:  self;				font: font;				getSelector: #currentStatusString;				contents: self currentStatusString;				stepTime: 2000;				lock.		}.		self inAColumn: {			toggle asMorph				on: #mouseUp send: #toggleFull to: self;				setBalloonText: 'Show more or less of Nebraska Status'		}.	}.	myServer _ self server.	(myServer isNil or: [fullDisplay not]) ifTrue: [		^World startSteppingSubmorphsOf: self	].	"--- the expanded display ---"	self addARow: {		self inAColumn: {			UpdatingStringMorph new				useStringFormat;				target:  self;				font: font;				getSelector: #currentBacklogString;				contents: self currentBacklogString;				stepTime: 2000;				lock.		}.	}.	self addARow: {		self inAColumn: {			(StringMorph contents: '--clients--' translated) lock; font: font.		}.	}.	myServer clients do: [ :each |		self addARow: {			UpdatingStringMorph new				useStringFormat;				target: each;				font: font;				getSelector: #currentStatusString;				contents: each currentStatusString;				stepTime: 2000;				lock.		}	].	World startSteppingSubmorphsOf: self.! !!NebraskaServerMorph methodsFor: 'initialization' stamp: 'aoy 2/15/2003 21:35'!setColorsAndBorder	| worldColor c |	c := ((Preferences menuColorFromWorld and: [Display depth > 4]) 				and: [(worldColor := self currentWorld color) isColor]) 					ifTrue: 						[worldColor luminance > 0.7 							ifTrue: [worldColor mixed: 0.8 with: Color black]							ifFalse: [worldColor mixed: 0.4 with: Color white]]					ifFalse: [Preferences menuColor]. 	self color: c.	self borderColor: #raised.	self borderWidth: Preferences menuBorderWidth.	self useRoundedCorners! !!NebraskaServerMorph class methodsFor: 'as yet unclassified' stamp: 'wiz 1/9/2005 15:12'!serveWorld: aWorld	"Check to make sure things won't crash. See Mantis #0000519"	aWorld isSafeToServe ifTrue:[		^self serveWorld: aWorld onPort: NebraskaServer defaultPort]	! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 8/23/2001 18:10'!checkForRebuild	| lastScreenMode flapsSuppressed |	lastScreenMode _ ScreenController lastScreenModeSelected ifNil: [false].	flapsSuppressed _ CurrentProjectRefactoring currentFlapsSuppressed.	((self valueOfProperty: #currentNavigatorVersion) = self currentNavigatorVersion			and: [lastScreenMode = self inFullScreenMode			and: [flapsSuppressed = self inFlapsSuppressedMode			and: [(self valueOfProperty: #includeSoundControlInNavigator) = 						Preferences includeSoundControlInNavigator]]]) ifFalse: [		self 			setProperty: #includeSoundControlInNavigator 			toValue: Preferences includeSoundControlInNavigator.		self setProperty: #flapsSuppressedMode toValue: flapsSuppressed.		self setProperty: #showingFullScreenMode toValue: lastScreenMode.		self setProperty: #currentNavigatorVersion toValue: self currentNavigatorVersion.		self removeAllMorphs.		self addButtons.	].! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'bf 10/8/2004 13:21'!currentNavigatorVersion	^29		"since these guys get saved, we fix them up if they are older versions"! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'yo 7/2/2004 20:01'!makeButton: aString balloonText: anotherString for: aSymbol	self flag: #yo.	"In principle, this method shouldn't call #translated."	^ SimpleButtonDelayedMenuMorph new target: self;		 borderColor: #raised;		 color: self colorForButtons;		 label: aString translated font: self fontForButtons;		 setBalloonText: anotherString translated;		 actionSelector: aSymbol! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'dgd 8/30/2003 21:59'!orientationString	^ (self orientedVertically		ifTrue: ['<yes>']		ifFalse: ['<no>'])		, 'vertical orientation' translated! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/6/2001 14:16'!retractIfAppropriate	mouseInside _ false.	self positionVertically.! !!ProjectNavigationMorph methodsFor: 'as yet unclassified' stamp: 'RAA 2/17/2001 12:44'!showMenuFor: aSymbol event: evt	(aSymbol == #publishProject or: [aSymbol == #publishProjectSimple]) ifTrue: [		self doPublishButtonMenuEvent: evt.		^true		"we did show the menu"	].	(aSymbol == #findAProject or: [aSymbol == #findAProjectSimple]) ifTrue: [		self doFindButtonMenuEvent: evt.		^true		"we did show the menu"	].	^false! !!ProjectNavigationMorph methodsFor: 'event handling' stamp: 'RAA 6/29/2000 11:11'!handlesMouseOver: evt	^true! !!ProjectNavigationMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:30'!defaultColor	"answer the default color/fill style for the receiver"	^ Color orange! !!ProjectNavigationMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 21:30'!initialize	"initialize the state of the receiver"	super initialize.	""	self layoutInset: 6;	  hResizing: #shrinkWrap;	  vResizing: #shrinkWrap;	  useRoundedCorners.	mouseInside _ false.	self addButtons! !!ProjectNavigationMorph methodsFor: 'stepping and presenter' stamp: 'RAA 8/23/2001 18:11'!step	| wb |	owner ifNil: [^ self].	(self ownerThatIsA: HandMorph) ifNotNil: [^self].	self checkForRebuild.	owner == self world ifTrue: [		owner addMorphInLayer: self.		wb _ self worldBounds.		self left < wb left ifTrue: [self left: wb left].		self right > wb right ifTrue: [self right: wb right].		self positionVertically.	].! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'mir 1/2/2004 13:54'!chooseLanguage

	Project current chooseNaturalLanguage! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'dgd 8/27/2004 18:35'!doFindButtonMenuEvent: evt	| menu selection |	menu _ CustomMenu new.	menu 		add: 'find a project' translated action: [self findAProjectSimple];		add: 'find a project (more places)' translated action: [self findAProject];		add: 'find any file' translated action: [self findAnything];		add: 'search the SuperSwiki' translated action: [self findSomethingOnSuperSwiki].	selection _ menu build startUpCenteredWithCaption: 'Find options' translated.	selection ifNil: [^self].	selection value.! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'yo 2/17/2005 15:40'!doNewPainting		| w f |	w _ self world.	w assureNotPaintingElse: [^ self].	(f _ self owner flapTab) ifNotNil: [f hideFlap].	w makeNewDrawing: (self primaryHand lastEvent copy setPosition: w center)! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'yo 2/10/2005 15:42'!doPublishButtonMenuEvent: evt	| menu selection |	menu _ CustomMenu new.	menu 		add: 'Publish' translated action: [self publishProject];		add: 'Publish As...' translated action: [self publishProjectAs];		add: 'Publish to Different Server' translated action: [self publishDifferent];		add: 'edit project info' translated action: [self editProjectInfo].	selection _ menu build startUpCenteredWithCaption: 'Publish options' translated.	selection ifNil: [^self].	selection value.! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'RAA 2/17/2001 12:27'!findAProject	FileList2 		morphicViewProjectLoader2InWorld: self world 		reallyLoad: true		dirFilterType: #initialDirectoryList! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'RAA 2/17/2001 12:27'!findAProjectSimple	FileList2 		morphicViewProjectLoader2InWorld: self world 		reallyLoad: true		dirFilterType: #limitedSuperSwikiDirectoryList! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'nb 6/17/2003 12:25'!getNewerVersionIfAvailable	(self world ifNil: [^Beeper beep]) project loadFromServer: true.! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'nb 6/17/2003 12:25'!nextProject	Project advanceToNextProject.	Beeper beep.! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'nb 6/17/2003 12:25'!previousProject	Project returnToPreviousProject.	CurrentProjectRefactoring exitCurrentProject.	"go to parent if no previous"	Beeper beep.! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'RAA 5/16/2001 17:44'!publishDifferent	self 		publishStyle: #initialDirectoryList 		forgetURL: true		withRename: false! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'yo 2/17/2005 14:55'!publishProject	self world paintBoxOrNil ifNotNil: [		(self confirm: 'You seem to be painting a sketch.Do you continue and publish the project with the paint tool?' translated) ifFalse: [^ self].	].	self 		publishStyle: #limitedSuperSwikiPublishDirectoryList 		forgetURL: false		withRename: false! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'mir 6/25/2001 16:53'!publishProjectAs	self 		publishStyle: #limitedSuperSwikiPublishDirectoryList 		forgetURL: false		withRename: true! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'mir 11/15/2004 10:25'!publishStyle: aSymbol forgetURL: aBoolean withRename: renameBoolean	| w saveOwner primaryServer rename |	w _ self world ifNil: [^Beeper beep].	w setProperty: #SuperSwikiPublishOptions toValue: aSymbol.	primaryServer _ w project primaryServerIfNil: [nil].	rename _ ((primaryServer notNil		and: [primaryServer acceptsUploads]) not)		or: [renameBoolean].	w setProperty: #SuperSwikiRename toValue: rename.	saveOwner _ owner.	self delete.	[w project 		storeOnServerShowProgressOn: self 		forgetURL: aBoolean | rename]		ensure: [saveOwner addMorphFront: self]! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'sw 3/3/2004 14:19'!quitSqueak
	"Obtain a confirmation from the user, and if the answer is true, quite Squeak summarily"

	(self confirm: 'Are you sure you want to Quit Squeak?' translated) ifFalse: [^ self].
	
	SmalltalkImage current snapshot: false andQuit: true
! !!ProjectNavigationMorph methodsFor: 'the actions' stamp: 'RAA 2/19/2001 09:52'!undoLastCommand		self world commandHistory undoLastCommand! !!ProjectNavigationMorph methodsFor: 'the buttons' stamp: 'yo 2/10/2005 15:37'!buttonFind
	"Answer a button for finding/loading projects"

	^ self makeButton: 'FIND' balloonText: 'Click here to find a project.  Hold down this button to reveal additional options.' translated for: #findAProjectSimple
! !!ProjectNavigationMorph methodsFor: 'the buttons' stamp: 'yo 2/10/2005 19:27'!buttonLanguage	"Answer a button for changing the language"	| myButton m |	myButton _ self makeButton: ''		balloonText:  'Click here to choose your language.' translated		for: #chooseLanguage.	myButton addMorph: (m _ self languageIcon asMorph lock).	myButton extent: m extent + (myButton borderWidth + 6).	m position: myButton center - (m extent // 2).	^ myButton! !!ProjectNavigationMorph methodsFor: 'the buttons' stamp: 'RAA 7/16/2001 14:06'!buttonNewProject	^self makeButton: 'NEW' balloonText: 'Start a new project' for: #newProject! !!ProjectNavigationMorph methodsFor: 'the buttons' stamp: 'yo 2/10/2005 15:42'!buttonPublish
	"Answer a button for publishing the project"

	^ self makeButton: 'PUBLISH IT!!' translated balloonText: 'Click here to save a project.  Hold down this button to reveal additional publishing options' translated for: #publishProject! !!ProjectNavigationMorph methodsFor: 'the buttons' stamp: 'RAA 2/19/2001 09:51'!buttonUndo	^self makeButton: 'Undo' balloonText: 'Undo the last command' for: #undoLastCommand! !!ProjectNavigationMorph methodsFor: 'the buttons' stamp: 'dgd 8/27/2004 18:43'!findSomethingOnSuperSwiki	| projectServers server index |	projectServers := ServerDirectory projectServers.	projectServers isEmpty		ifTrue: [^self].	projectServers size = 1		ifTrue: [server := projectServers first]		ifFalse: [index := (PopUpMenu labelArray: (projectServers collect: [:each | (ServerDirectory nameForServer: each) translatedIfCorresponds]) lines: #()) 				startUpWithCaption: 'Choose a super swiki:' translated.			index > 0				ifTrue: [server := projectServers at: index]				ifFalse: [^self]].	EToyProjectQueryMorph onServer: server! !!ProjectNavigationMorph methodsFor: 'the buttons' stamp: 'bf 10/8/2004 12:47'!languageIcon	^ (ColorForm	extent: 19@18	depth: 4	fromArray: #( 4294967295 4294967295 4293918720 4294967206 2183331839 4293918720 4294946286 3972145919 4293918720 4294631150 3430031919 4293918720 4289588973 3396477476 4293918720 4292799965 3399692836 4293918720 4208913868 724784466 804257792 4141735107 858993445 804257792 4140616899 1127429205 804257792 4174171340 3006481493 804257792 4174171340 3274982741 804257792 4170435788 3409204562 804257792 4280497100 1429493074 4293918720 4280431429 1429558562 4293918720 4294059093 1431654959 4293918720 4294919237 1431446271 4293918720 4294967074 572719103 4293918720 4294967295 4294967295 4293918720)	offset: 0@0)	colorsFromArray: #(#(0.0 0.0 0.0) #(1.0 1.0 1.0) #(0.376 0.376 0.784) #(0.357 0.357 0.733) #(0.231 0.231 0.474) #(0.494 0.494 0.964) #(0.498 0.498 0.933) #(0.376 0.376 0.706) #(0.419 0.419 0.78) #(0.415 0.415 0.776) #(0.595 0.595 0.972) #(0.638 0.638 0.968) #(0.654 0.654 0.96) #(0.686 0.686 0.96) #(0.71 0.71 0.964) #( )  )! !!ProjectNavigationMorph methodsFor: '*sound' stamp: 'dgd 9/1/2003 11:36'!buttonSound	| myButton m |	myButton _ RectangleMorph new 		borderWidth: 1;		cornerStyle: #rounded;		borderColor: #raised;		color: self colorForButtons;		setBalloonText: 'Change sound volume' translated;		on: #mouseDown send: #soundDownEvt:morph: to: self;		on: #mouseStillDown send: #soundStillDownEvt:morph: to: self;		on: #mouseUp send: #soundUpEvt:morph: to: self;		yourself.	myButton addMorph: (m _ self speakerIcon lock).	myButton extent: m extent + (myButton borderWidth + 6).	m position: myButton center - (m extent // 2).	^myButton! !!ProjectNavigationMorph methodsFor: '*sound' stamp: 'ar 8/23/2001 23:52'!getSoundVolume	^SoundPlayer soundVolume average! !!ProjectNavigationMorph methodsFor: '*sound' stamp: 'ar 8/23/2001 23:49'!setSoundVolume: x	SoundPlayer setVolumeLeft: x volumeRight: x.! !!ProjectNavigationMorph methodsFor: '*sound' stamp: 'ar 8/23/2001 23:57'!soundDownEvt: a morph: b	soundSlider ifNotNil: [soundSlider delete].	(soundSlider _ RectangleMorph new)		setProperty: #morphicLayerNumber toValue: 1;		extent: b width @ (b width * 3);		color: self colorForButtons;		borderColor: #raised;		bottomLeft: b boundsInWorld origin.	soundSlider addMorph: (		RectangleMorph new			color: self colorForButtons;			borderColor: #raised;			extent: b width @ 8;			center: soundSlider center x @ 				(soundSlider bottom - (soundSlider height * self getSoundVolume) asInteger)	).	soundSlider openInWorld.! !!ProjectNavigationMorph methodsFor: '*sound' stamp: 'ar 8/23/2001 23:49'!soundStillDownEvt: evt morph: b	| y pct |	soundSlider ifNil: [^self].	y _ evt hand position y.	(y between: soundSlider top and: soundSlider bottom) ifTrue: [		pct _ (soundSlider bottom - y) asFloat / soundSlider height.		self setSoundVolume: pct.		soundSlider firstSubmorph top: y - 5.	]. ! !!ProjectNavigationMorph methodsFor: '*sound' stamp: 'gk 2/24/2004 23:29'!soundUpEvt: a morph: b	soundSlider ifNotNil: [soundSlider delete].	soundSlider _ nil.	Beeper beep ! !!ProjectNavigationMorph methodsFor: '*sound' stamp: 'RAA 8/23/2001 17:05'!speakerIcon	^ImageMorph new			image: ((Form	extent: 19@18	depth: 8	fromArray: #( 0 0 1493172224 0 0 0 0 1493172224 0 0 0 138 1493172224 0 0 0 35509 2315255808 0 0 0 9090522 2315255808 0 0 0 2327173887 2315255819 0 0 138 3051028442 2315255819 0 0 1505080590 4294957786 2315255808 184549376 0 3053453311 4292532917 1493172224 184549376 0 1505080714 3048584629 1493172224 184549376 0 9079434 3048584629 1493172224 184549376 0 138 2327164341 1493172235 0 0 0 2324346293 1493172235 0 0 0 9079477 1493172224 0 0 0 35466 1493172224 0 0 0 138 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: 0@0)			);			setBalloonText: 'Quiet';			on: #mouseUp send: #yourself to: 1	! !!ProjectNavigationMorph methodsFor: 'buttons' stamp: 'mir 2/29/2004 14:53'!makeTheButtons

	^{
		self buttonNewProject.
		self buttonShare.
		self buttonPrev.
		self buttonNext.
		self buttonPublish.
		self buttonNewer.
		self buttonTell.
		self buttonFind.
		self buttonFullScreen.
		"self buttonFlaps."
		self buttonPaint.
	},
	(
		Preferences includeSoundControlInNavigator ifTrue: [{self buttonSound}] ifFalse: [#()]
	),
	{
		self buttonLanguage.
		self buttonUndo.
		self buttonQuit.
	}
! !!ProjectNavigationMorph class methodsFor: 'as yet unclassified' stamp: 'mir 8/22/2001 18:09'!preferredNavigator	"Preferences eToyFriendly ifTrue: [^KidNavigationMorph]."	^ProjectNavigationMorph! !!ThreadNavigationMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 22:31'!defaultColor	"answer the default color/fill style for the receiver"	^ Color red lighter! !!ThreadNavigationMorph methodsFor: 'initialization' stamp: 'dgd 2/14/2003 21:28'!initialize	"initialize the state of the receiver"	super initialize.	""	self layoutInset: 6;	  hResizing: #shrinkWrap;	  vResizing: #shrinkWrap;	  useRoundedCorners;	  ensureSuitableDefaults;	  addButtons! !!ThreadNavigationMorph methodsFor: 'initialization' stamp: 'dgd 9/19/2003 15:23'!makeButton: aString balloonText: anotherString for: aSymbol 	^ SimpleButtonDelayedMenuMorph new target: self;		 borderColor: #raised;		 color: self colorForButtons;		 label: aString translated font: self fontForButtons;		 setBalloonText: anotherString translated;		 actionSelector: aSymbol! !!ThreadNavigationMorph methodsFor: 'navigation' stamp: 'nb 6/17/2003 12:25'!firstPage	listOfPages isEmpty ifTrue: [^Beeper beep].	currentIndex _ 1.	self loadPageWithProgress.! !!ThreadNavigationMorph methodsFor: 'navigation' stamp: 'nb 6/17/2003 12:25'!lastPage	listOfPages isEmpty ifTrue: [^Beeper beep].	currentIndex _ listOfPages size.	self loadPageWithProgress.! !!ThreadNavigationMorph methodsFor: 'navigation' stamp: 'nk 7/30/2004 21:47'!navigateFromKeystroke: aChar 	"A character was typed in an effort to do interproject navigation along the receiver's thread"	| ascii |	ascii := aChar asciiValue.	(#(29 31 32) includes: ascii) ifTrue: [^self nextPage].	"right arrow, down arrow, space"	(#(8 28 30) includes: ascii) ifTrue: [^self previousPage].	"left arrow, up arrow, backspace"	(#(1) includes: ascii) ifTrue: [^self firstPage].	(#(4) includes: ascii) ifTrue: [^self lastPage].	Beeper beep! !!ThreadNavigationMorph methodsFor: 'navigation' stamp: 'nb 6/17/2003 12:25'!nextPage	self currentIndex >= listOfPages size ifTrue: [^Beeper beep].	currentIndex _ self currentIndex + 1.	self loadPageWithProgress.! !!ThreadNavigationMorph methodsFor: 'navigation' stamp: 'nb 6/17/2003 12:25'!previousPage	self currentIndex <= 1 ifTrue: [^Beeper beep].	currentIndex _ self currentIndex - 1.	self loadPageWithProgress.! !!ThreadNavigationMorph methodsFor: 'private' stamp: 'dgd 2/22/2003 13:24'!loadPage	| theProject projectInfo url gotoPage theBook |	projectInfo := listOfPages at: currentIndex.	url := projectInfo first.	gotoPage := projectInfo at: 2 ifAbsent: [nil].	[Project fromUrl: url] on: ProjectEntryNotification		do: 			[:ex | 			self deleteCurrentPage.			theProject := ex projectToEnter enterAsActiveSubprojectWithin: self world.			theProject world showExpandedView.			loadedProject := theProject.			gotoPage ifNotNil: 					[theBook := loadedProject world findA: BookMorph.					theBook ifNotNil: [theBook goToPage: gotoPage]].			^loadedProject]! !----SNAPSHOT----#(19 April 2006 2:59:06 pm) Promoter106.1.image priorSource: 111178!----STARTUP----#(19 April 2006 3:07:23 pm) as C:\_RVASoftPropio\Promoter\instalador\Promoter.image!----SNAPSHOT----#(19 April 2006 3:07:24 pm) Promoter.image priorSource: 111178!----STARTUP----#(20 April 2006 9:11:04 am) as C:\_RVASoftPropio\Promoter\instalador\Promoter.image!----SNAPSHOT----#(20 April 2006 9:11:34 am) Promoter.image priorSource: 111366!