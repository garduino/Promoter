'From Squeak3.7beta of ''1 April 2004'' [latest update: #5923] on 23 May 2004 at 4:58:03 pm'!Object subclass: #Company	instanceVariableNames: 'coSiteName coURL coWebmasterName coWebmasterMail coCountry coCategory coDescription coKeywords'	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-Model'!!Company commentStamp: 'gsa 4/5/2004 09:19' prior: 0!Description: I represent the company data to be added to search engines.Programmer: gsaDate: 04/04/2004!TestCase subclass: #CompanySetTest	instanceVariableNames: 'testCompany'	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-Model-Tests'!Object subclass: #Promoter	instanceVariableNames: 'companies searchEngines version edition promoterTasks license'	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-Model'!!Promoter commentStamp: 'gsa 5/22/2004 18:23' prior: 0!Description: I'm the main class of Promoter-Model.Programmer: gsaDate: 04/04/2004Features & TO-DO's:* Buscadores internacionales, espa–oles, argentinos: Podr’a ser una interfaz tipo treeview, como el Package Loader.* Interfase inglŽs-espa–ol (mediante Babel y translated, como en imagen SmallLand).* Datos (compa–’as, buscadores, etc) en XML? serializados a la Dolphin? segmentos de imagen? (Smart)RefStream?-* Splash screen como la de las revistas de Squeak.* Chequeo conexi—n a Internet.* Hay muchos TO-DOs escritos en los mŽtodos correspondientes.* Ver como heredar de una sola WAComponent el estilo, para no tener que repetirlo en cada app llamada desde la inicial.* Ver persistencia, como lo hace, el PromoterModel esta una sola vez en PromoterMainSession y con Promoter allInstances explore, podemos ver que es asi.Features & TO-DO's (To the NEWEST VERSION):* Group Search Engines by Category.Empaquetado Producto:* Sistema de Registraci—n.* Ventana imagen m‡s chica que el desktop.* Instalador NSIS con squeak.exe renombrado a promoter.exe y squeak.image a promoter.gsa.* Achicar y cerrar la imagen de acuerdo a SqueakRos.* Logo, gr‡fica, splash.Licensing Options:* 1 url - few search engines - without maintenance: FREE* 1 domain - full engines - 1 year maintenance: u$s 19* Unlimited domains - full engines - 1 year maintenance: u$s 49Problems to solve:* abandonSources don't works in 3.7 image. Problem posted in list date 04/2004.	Solved: 23/04/2004	Starting with a fresh image, abandonSources works.* [BUG] 24/04/2004 Metaobject of PromoterTask don't show Engines Names and URL's.	Solved: 25/04/2004 Fix en Mewa (Version 14) by Adrian Leinhard.* [BUG] 25/04/2004 Metaobject of PromoterTask (searchEngine) don't work validation rule.	Solved: 25/04/2004 Builded the validation rule different. (See A. Lienhard mail in Seaside list).Features Completed:* 25/04/2004: En SearchEngines poner el combo para methods (GET y POST).!WAComponent subclass: #PromoterCompany	instanceVariableNames: 'batcher'	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-UI-Seaside'!WAComponent subclass: #PromoterConfiguration	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-UI-Seaside'!WAComponent subclass: #PromoterData	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-UI-Seaside'!WAComponent subclass: #PromoterInfo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-UI-Seaside'!MWViewerVisitor subclass: #PromoterListItemViewer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-UI-Seaside'!WAComponent subclass: #PromoterMain	instanceVariableNames: 'tabs'	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-UI-Seaside'!WAControllerSession subclass: #PromoterMainSession	instanceVariableNames: ''	classVariableNames: 'PromoterModel'	poolDictionaries: ''	category: 'Promoter-UI-Seaside'!WAComponent subclass: #PromoterSearchEngine	instanceVariableNames: 'batcher'	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-UI-Seaside'!Object subclass: #PromoterTask	instanceVariableNames: 'companyToPromote searchEnginesToUse'	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-Model'!!PromoterTask commentStamp: 'gsa 4/21/2004 19:04' prior: 0!Description: I represent the PromoterTask (The Task by the user add the Company(es) data to one, several or all the Search Engines).Programmer: gsaDate: 21/04/2004!WAComponent subclass: #PromoterTaskUI	instanceVariableNames: 'batcher aReturnPage'	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-UI-Seaside'!Object subclass: #SearchEngine	instanceVariableNames: 'seName seURL seMethod seSuccessString seUserAgent seReferer'	classVariableNames: ''	poolDictionaries: ''	category: 'Promoter-Model'!!SearchEngine commentStamp: 'gsa 4/5/2004 09:20' prior: 0!Description: I represent a single search engine, where the company data will be added.Programmer: gsaDate: 04/04/2004!!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:17'!coCategory	^coCategory! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:11'!coCategory: anObject 	"Setter of coCategory, invokes validate method for coCategory"	[self validateCoCategory: anObject]		whileFalse: [self validateCoCategory: anObject].	coCategory := anObject! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:05'!coCountry	^coCountry! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:04'!coCountry: anObject 	"Setter of coCountry, invokes validate method for coCountry"	[self validateCoCountry: anObject]		whileFalse: [self validateCoCountry: anObject].	coCountry := anObject! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:17'!coDescription	^coDescription! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:06'!coDescription: anObject 	"Setter of coDescription, invokes validate method for 	coDescription "	[self validateCoDescription: anObject]		whileFalse: [self validateCoDescription: anObject].	coDescription := anObject! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:17'!coKeywords	^coKeywords! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:16'!coKeywords: anObject 	"Setter of coKeywords, invokes validate method for  	coKeywords"	"TO-DO keywords could (or must) be an array"	[self validateCoKeywords: anObject]		whileFalse: [self validateCoKeywords: anObject].	coKeywords := anObject! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 18:53'!coSiteName	^coSiteName! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 12:13'!coSiteName: anObject 	"Setter of coSiteName, invokes validate method for  	coSiteName"	[self validateCoSiteName: anObject]		whileFalse: [self validateCoSiteName: anObject].	coSiteName := anObject! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:02'!coURL	^coURL! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 18:54'!coURL: anObject 	"Setter of coURL, invokes validate method for coURL"	[self validateCoURL: anObject]		whileFalse: [self validateCoURL: anObject].	coURL := anObject! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:17'!coWebmasterMail	^coWebmasterMail! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:07'!coWebmasterMail: anObject 	"Setter of coWebmasterMail, invokes validate method for 	coWebmasterMail "	[self validateCoWebmasterMail: anObject]		whileFalse: [self validateCoWebmasterMail: anObject].	coWebmasterMail := anObject! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:17'!coWebmasterName	^coWebmasterName! !!Company methodsFor: 'accessing' stamp: 'gsa 4/9/2004 19:07'!coWebmasterName: anObject 	"Setter of coWebmasterName, invokes validate method for  	coWebmasterName"	[self validateCoWebmasterName: anObject]		whileFalse: [self validateCoWebmasterName: anObject].	coWebmasterName := anObject! !!Company methodsFor: 'accessing' stamp: 'gsa 5/23/2004 10:23'!metaobject	"Mewa required method"	| metaobject |	metaobject := MWMetaobject for: self.	metaobject		textAttribute: #coSiteName		do: [:attribute | attribute label: 'Site Name' translated;				 maxLength: 50;				 addRequiredRule].	metaobject		textAttribute: #coURL		do: [:attribute | attribute label: 'Site URL' translated;				 maxLength: 50;				 addRequiredRule].	metaobject		textAttribute: #coWebmasterName		do: [:attribute | attribute label: 'Webmaster Name' translated;				 maxLength: 50;				 readOnly].	metaobject		textAttribute: #coWebmasterMail		do: [:attribute | attribute label: 'Webmaster Mail' translated;				 maxLength: 50;				 readOnly].	metaobject		textAttribute: #coCountry		do: [:attribute | attribute label: 'Country' translated;				 maxLength: 30;				 addRequiredRule].	metaobject		textAttribute: #coCategory		do: [:attribute | attribute label: 'Categor’a' translated;				 maxLength: 30;				 readOnly].	metaobject		textAttribute: #coDescription		do: [:attribute | attribute label: 'Description' translated;				 maxLength: 60;				 addRequiredRule].	metaobject		textAttribute: #coKeywords		do: [:attribute | attribute label: 'Keywords' translated;				 maxLength: 200;				 addRequiredRule;								addValidationRule: [:keywords | keywords size > 0]				errorString: 'Must specify at least one keyword' translated].	^ metaobject! !!Company methodsFor: 'validating' stamp: 'gsa 4/9/2004 19:12'!validateCoCategory: anObject 	"Validates the coCategory"	"TO-DO Complete validation method having categories array to  	validate against it"	anObject size <= 0		ifTrue: [self error: 'You must provide a Category.' translated.			^ false]		ifFalse: [^ true]! !!Company methodsFor: 'validating' stamp: 'gsa 4/9/2004 19:04'!validateCoCountry: anObject 	"Validates the coCountry"	"TO-DO Complete validation method having conutry array to 	validate against it"	(anObject size <= 0)		ifTrue: [self error: 'You must provide a Country name.' translated.			^ false]		ifFalse: [^ true]! !!Company methodsFor: 'validating' stamp: 'gsa 4/9/2004 19:07'!validateCoDescription: anObject 	"Validates the coDescription"	anObject size <= 0		ifTrue: [self error: 'You must provide a Description.' translated.			^ false]		ifFalse: [^ true]! !!Company methodsFor: 'validating' stamp: 'gsa 4/9/2004 19:08'!validateCoKeywords: anObject 	"Validates the coKeywords"	anObject size <= 0		ifTrue: [self error: 'You must provide at least one Keyword.' translated.			^ false]		ifFalse: [^ true]! !!Company methodsFor: 'validating' stamp: 'gsa 4/9/2004 18:49'!validateCoSiteName: anObject	"Validates the coSiteName"	(anObject size <= 0)		ifTrue: [self error: 'You must provide a 			Site Name.' translated.			^ false]		ifFalse: [^ true]! !!Company methodsFor: 'validating' stamp: 'gsa 4/9/2004 19:02'!validateCoURL: anObject 	"Validates the coURL"	"TO-DO Write a validation URL string"	anObject size <= 0		ifTrue: [self error: 'You must provide a valid URL.' translated.			^ false]		ifFalse: [^ true]! !!Company methodsFor: 'validating' stamp: 'gsa 4/9/2004 19:08'!validateCoWebmasterMail: anObject 	"Validates the coWebmasterMail"	"TO-DO Write a validation email address string"	anObject size <= 0		ifTrue: [self error: 'You must provide a valid Email address.' translated.			^ false]		ifFalse: [^ true]! !!Company methodsFor: 'validating' stamp: 'gsa 4/9/2004 19:08'!validateCoWebmasterName: anObject 	"Validates the coWebmasterName"	anObject size <= 0		ifTrue: [self error: 'You must provide a Webmaster Name.' translated.			^ false]		ifFalse: [^ true]! !!CompanySetTest methodsFor: 'testing' stamp: 'gsa 4/9/2004 19:13'!testCoCategory	testCompany coCategory: 'Computers & Internet'.	self assert: testCompany coCategory size > 0! !!CompanySetTest methodsFor: 'testing' stamp: 'gsa 4/9/2004 19:05'!testCoCountry	testCompany coCountry: 'Argentina'.	self assert: testCompany coCountry size > 0! !!CompanySetTest methodsFor: 'testing' stamp: 'gsa 4/9/2004 19:15'!testCoDescription	testCompany coDescription: 'Software and Websites Development'.	self assert: testCompany coDescription size > 0! !!CompanySetTest methodsFor: 'testing' stamp: 'gsa 4/9/2004 19:16'!testCoKeywords	testCompany coKeywords: 'software computers internet development smalltalk squeak'.	self assert: testCompany coKeywords size > 0! !!CompanySetTest methodsFor: 'testing' stamp: 'gsa 4/9/2004 18:51'!testCoSiteName	testCompany coSiteName: 'Example Company Name'.	self assert: testCompany coSiteName size > 0! !!CompanySetTest methodsFor: 'testing' stamp: 'gsa 4/9/2004 18:56'!testCoURL	testCompany coURL: 'http://www.arsol.biz'.	self assert: testCompany coURL size > 0! !!CompanySetTest methodsFor: 'testing' stamp: 'gsa 4/9/2004 19:10'!testCoWebmasterMail	testCompany coWebmasterMail: 'gsa@arsol.net'.	self assert: testCompany coWebmasterMail size > 0! !!CompanySetTest methodsFor: 'testing' stamp: 'gsa 4/9/2004 19:09'!testCoWebmasterName	testCompany coWebmasterName: 'German Arduino'.	self assert: testCompany coWebmasterName size > 0! !!CompanySetTest methodsFor: 'running' stamp: 'gsa 4/9/2004 11:47'!setUp	testCompany := Company new! !!CompanySetTest methodsFor: 'running' stamp: 'gsa 4/9/2004 11:57'!tearDown	testCompany := nil! !!Promoter methodsFor: 'accessing' stamp: 'gsa 4/4/2004 09:38'!companies	"Returns the receiver's companies."	companies isNil		ifTrue: [self initializeCompanies].	^ companies! !!Promoter methodsFor: 'accessing' stamp: 'gsa 4/10/2004 16:40'!edition	"Returns the Promoter Edition, that may be: Free - Standard  	- Professional"	"TO-DO By now hardcoded, but must be retrieved of  	somewhere"	^ 'Professional'! !!Promoter methodsFor: 'accessing' stamp: 'gsa 4/25/2004 10:02'!license	"Returns the Promoter License"	^ 'Promoter Software is developed and maintained by Germ‡n S. Arduino, who has all the copyrights about it.' squeakToIso! !!Promoter methodsFor: 'accessing' stamp: 'gsa 4/24/2004 11:20'!promoterTasks	"Returns the receiver's promoterTasks."	promoterTasks isNil		ifTrue: [self initializePromoterTasks].	^ promoterTasks! !!Promoter methodsFor: 'accessing' stamp: 'gsa 4/4/2004 09:49'!searchEngines	"Returns the receiver's searchEngines."	searchEngines isNil		ifTrue: [self initializeSearchEngines].	^ searchEngines! !!Promoter methodsFor: 'accessing' stamp: 'gsa 4/10/2004 19:36'!version	"Returns the Promoter Version"	"History of versions, next:"	"Alpha 0.1 Apr 2004"	^ 'Alpha 0.1 - Apr 2004'! !!Promoter methodsFor: 'initialize' stamp: 'gsa 4/4/2004 09:40'!initializeCompanies	"Private - Initializes the receiver's companies."	companies := Set new! !!Promoter methodsFor: 'initialize' stamp: 'gsa 4/24/2004 11:21'!initializePromoterTasks	"Private - Initializes the receiver's promoterTasks."	promoterTasks := Set new! !!Promoter methodsFor: 'initialize' stamp: 'gsa 4/4/2004 09:49'!initializeSearchEngines	"Private - Initializes the receiver's searchEngines."	searchEngines := Set new! !!Promoter methodsFor: 'adding' stamp: 'gsa 4/10/2004 16:08'!addCompany	"Add company data to companies collection, depending on  	the version:  	Free: Only one url  	Standard: Several url, but alls from the same domain  	Professional: Unlimited URLs  	TO-DO Validate ALL the previous"	"DEPRECATED in favour of addCompany: "	| newCompany tempField |	newCompany := Company new.	tempField := FillInTheBlank request: 'Enter the Company Site Name' translated.	"Lo siguientes es para evitar descripciones en blanco"	"Falta ver si se puede detectar de mejor forma si se presion—  	el  	Cancel del FillInTheBlank"	tempField size = 0		ifFalse: [newCompany coSiteName: tempField.			tempField := nil.			self companies add: newCompany]! !!Promoter methodsFor: 'adding' stamp: 'gsa 4/10/2004 16:09'!addCompany: aCompany	companies add: aCompany! !!Promoter methodsFor: 'adding' stamp: 'gsa 4/24/2004 11:23'!addPromoterTask: aPromoterTask 	promoterTasks add: aPromoterTask! !!Promoter methodsFor: 'adding' stamp: 'gsa 4/15/2004 18:48'!addSearchEngine: aSearchEngine 	searchEngines add: aSearchEngine! !!Promoter methodsFor: 'removing' stamp: 'gsa 4/10/2004 15:40'!removeCompany: aCompany 	companies remove: aCompany! !!Promoter methodsFor: 'removing' stamp: 'gsa 4/24/2004 11:31'!removePromoterTask: aPromoterTask	promoterTasks remove: aPromoterTask! !!Promoter methodsFor: 'actions' stamp: 'gsa 5/23/2004 10:24'!addURL: aCompany inSearchEngine: aEngine 	"Aqu’ armo el string de adicion a buscadores, segœn el  	buscador de que se trate"	"Google Argentina"	"TO-DO Write the complete method"	"aPromoterTask explore"	| httpString aReturnPage |	aEngine seURL = 'http://www.google.com.ar/addurl'		ifTrue: ["Build the submit string"			"self halt."			"httpString := aEngine seURL , '?q=' , aCompany 			coURL , '&dq=' , aCompany coDescription , 			'&submit=Agregar+URL'. "			httpString := aEngine seURL , '?q=' , aCompany coURL , '&dq=squeak&submit=Agregar+URL'.			aReturnPage := HTTPSocket httpShowPage: httpString.			"returnPage := aReturnPage."			"self halt."			^ aReturnPage]! !!Promoter methodsFor: 'actions' stamp: 'gsa 5/22/2004 09:51'!promote: aPromoterTask 	"The method that add the data to the search Engines"	"TO-DO Write the complete method"	"aPromoterTask explore"	| sEngines aCompany |	aCompany := aPromoterTask companyToPromote.	sEngines := aPromoterTask searchEnginesToUse.	"sEngines  	do: [:aEngine | Transcript show: aEngine seURL printString; 	cr]"	sEngines		do: [:aEngine | self addURL: aCompany inSearchEngine: aEngine]! !!Promoter methodsFor: 'objects from disk' stamp: 'gsa 5/1/2004 10:35'!saveImage	Smalltalk snapshot: true andQuit: false! !!Promoter class methodsFor: 'as yet unclassified' stamp: 'gsa 4/4/2004 10:15'!instanciar	"Script de instanciaci—n de Promoter."	"Main Promoter"	| promoter company searchEngine |	promoter := Promoter new.	"Companies Data"	company := Company new.	company coSiteName: 'ArSol.net';		 coURL: 'http://www.arsol.net';		 coWebmasterName: 'Germ‡n Arduino' squeakToIso;		 coWebmasterMail: 'info@arsol.net';		 coCountry: 'Argentina';		 coDescription: 'Web Hosting and Domain Names';		 coKeywords: 'hosting servers linux windows';		 yourself.	"SearchEngines Data"	searchEngine := SearchEngine new.	searchEngine seName: 'Google';		 seURL: 'http://www.google.com/addurl?q=[URL]&dq=&submit=Add+url';		seMethod: 'GET';		seSuccessString: 'successfully added';		seUserAgent: 'Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)';		seReferer: 'http://www.google.com/addurl.html';		 yourself.	"Add collections data"	promoter companies add: company;		 yourself.	promoter searchEngines add: searchEngine;		 yourself.	"Exploring the model"	promoter explore! !!Promoter class methodsFor: 'class initialization' stamp: 'gsa 4/10/2004 15:14'!new	"This is copied from Mewa, MWDomainModel, see to understand"	^ super new initialize; yourself! !!PromoterCompany methodsFor: 'initialization' stamp: 'gsa 5/22/2004 16:58'!initialize	| views |	super initialize.	views := self session domainmodel companies asOrderedCollection				collect: [:each | PromoterListItemViewer metaobject: (each metaobject hideAttributeOf: #coWebmasterName;							 hideAttributeOf: #coWebmasterMail;							 hideAttributeOf: #coCategory;							 yourself)].	batcher := WABatchedList new items: views;				 batchSize: 5;				 yourself! !!PromoterCompany methodsFor: 'rendering' stamp: 'gsa 4/10/2004 19:40'!renderContentOn: html 	"html h1: self class."	html h3: 'Companies' translated.	html cssClass: 'TABLE-LIST'.	html		table: [batcher batch				do: [:viewer | html						tableRow: [html render: viewer.							html								tableData: [html										anchorWithAction: [self edit: viewer metaobject baseobject]										text: 'edit';										 space;																				anchorWithAction: [self delete: viewer metaobject baseobject]										text: 'delete']]].			html attributeAt: #align put: #center.			html tableRowWith: batcher span: 8].	html break.	html		anchorWithAction: [self addNew]		text: 'Create New Company'! !!PromoterCompany methodsFor: 'rendering' stamp: 'gsa 4/10/2004 15:31'!style	^ '		body { font-size : 12px; font-family : Arial;  }		.TABLE-LIST { width: 500; font-size: 12px; font-family: Arial; border: thin groove; }	'! !!PromoterCompany methodsFor: 'actions' stamp: 'gsa 4/10/2004 15:34'!addNew	| newCompany |	newCompany := self				call: (MWEditorVisitor model: Company new).	newCompany		ifNotNil: [self session domainmodel addCompany: newCompany.			self initialize]! !!PromoterCompany methodsFor: 'actions' stamp: 'gsa 4/10/2004 15:39'!delete: aCompany	(self confirm: 'Do you really want to delete ' , aCompany asString , '?')		ifTrue: [self session domainmodel removeCompany: aCompany.			self initialize]! !!PromoterCompany methodsFor: 'actions' stamp: 'gsa 4/10/2004 15:42'!edit: aCompany 	self		call: (MWEditorVisitor model: aCompany)! !!PromoterCompany class methodsFor: 'class initialization' stamp: 'gsa 4/10/2004 15:23'!initialize	self registerAsApplication: 'PromoterCompany' sessionClass: PromoterMainSession! !!PromoterConfiguration methodsFor: 'rendering' stamp: 'gsa 4/25/2004 11:23'!renderContentOn: html 	"TO-DO Set proxy - Set registration key"	html h3: 'Configuration' translated.	html cssClass: 'TABLE-LIST'! !!PromoterConfiguration methodsFor: 'rendering' stamp: 'gsa 4/25/2004 09:38'!style	^ '		body { font-size : 12px; font-family : Arial;  }		.TABLE-LIST { width: 500; font-size: 12px; font-family: Arial; border: thin groove; }	'! !!PromoterData methodsFor: 'rendering' stamp: 'gsa 5/22/2004 17:04'!renderContentOn: html 	"html h1: self class."	html h3: 'Promotion Data' translated.	html attributeAt: #align put: #center.	html		anchorWithAction: [self session domainmodel saveImage]		text: 'Save Data' translated.	html break.	html break.	html		anchorWithAction: [self addNew]		text: 'Backup all Promoter data as' translated.	"html attributeAt: #align put: #center."	html break.	html break.	html		anchorWithAction: [self saveImage]		text: 'Recover All Promoter data from backup file' translated.	html break.	html break.	html		anchorWithAction: [self saveImage]		text: 'Backup Promoter Search Engines data as' translated.	html break.	html break.	"TO-DO Testear Version para permitir esto y lo anterior"	html		anchorWithAction: [self saveImage]		text: 'Recover Promoter Search Engines data from' translated.	html break.	html break! !!PromoterData methodsFor: 'rendering' stamp: 'gsa 4/25/2004 11:24'!style	^ '		body { font-size : 12px; font-family : Arial;  }		.TABLE-LIST { width: 500; font-size: 12px; font-family: Arial; border: thin groove; }	'! !!PromoterInfo methodsFor: 'rendering' stamp: 'gsa 4/25/2004 11:23'!renderContentOn: html 	"TO-DO Display the software license - Internet connection availability"	html h3: 'Information' translated.	html h5: 'Edition: ' squeakToIso translated , self session domainmodel edition.	html h5: 'Version: ' squeakToIso translated , self session domainmodel version.	html h5: 'Software License:' translated.	html cssClass: 'TABLE-LIST'.	html text: self session domainmodel license! !!PromoterInfo methodsFor: 'rendering' stamp: 'gsa 4/10/2004 19:23'!style	^ '		body { font-size : 12px; font-family : Arial;  }		.TABLE-LIST { width: 500; font-size: 12px; font-family: Arial; border: thin groove; }	'! !!PromoterInfo class methodsFor: 'class initialization' stamp: 'gsa 4/10/2004 16:37'!initialize	self registerAsApplication: 'PromoterInfo' sessionClass: PromoterMainSession! !!PromoterListItemViewer methodsFor: 'as yet unclassified' stamp: 'gsa 4/10/2004 15:27'!renderContentOn: html 	self renderFieldsOn: html! !!PromoterListItemViewer methodsFor: 'as yet unclassified' stamp: 'gsa 4/10/2004 15:28'!renderLabel: aString value: anotherString 	renderer tableData: anotherString! !!PromoterMain methodsFor: 'initialization' stamp: 'gsa 4/25/2004 11:26'!initialize	tabs := WATabPanel withAll: (OrderedCollection new add: 'Promoter Data' -> PromoterData new;					 add: 'Companies' -> PromoterCompany new;					 add: 'Search Engines' -> PromoterSearchEngine new;					 add: 'Promotion Tasks' -> PromoterTaskUI new;					 add: 'Configuration' -> PromoterConfiguration new;					 add: 'Information' -> PromoterInfo new;					 yourself)! !!PromoterMain methodsFor: 'rendering' stamp: 'gsa 4/15/2004 19:00'!renderContentOn: html 	html heading: 'Promoter by ArSol'.	html render: tabs! !!PromoterMain methodsFor: 'rendering' stamp: 'gsa 4/10/2004 09:27'!style	^ 'body {  background: white;  color: black}h1 {  color: #c33;  background: transparent;  font-weight: bold;  text-align: center}h2 {  color: #00008b;  background: transparent;  font-weight: bold}h3 {  color: #006400;  background: transparent;  margin-left: 4%;  margin-right: 4%;  font-weight: bold}h4 {  margin-left: 6%;  margin-right: 6%;  font-weight: bold}h5 {  margin-left: 6%;  margin-right: 6%;  font-weight: bold}ul, ol, dl, p {  margin-left: 6%;  margin-right: 6%}ul ul, table ol, table ul {  margin-right: 1%}pre {  margin-left: 10%;  white-space: pre}table caption {  font-size: larger;  font-weight: bolder}table p, table dl, ol p, ul p, dl p, blockquote p, .note p, .note ul, .note ol, .note dl, li pre, dd pre {  margin-left: 0;  margin-right: 0}p.top {  margin-left: 1%;  margin-right: 1%}blockquote {  margin-left: 8%;  margin-right: 8%;  border: thin ridge #dc143c}blockquote pre {  margin-left: 1%;  margin-right: 1%}dt a {  font-weight: bold;  margin-top: .8em}a:link {  color: #00f;  background: transparent;}a:visited {  color: #800080;  background: transparent;}a:active {  color: green;  background: #FFD700}.html {  color: #000080;  background: transparent}.css {  color: #800000;  background: transparent}.javascript {  color: #008000;  background: transparent}.example { margin-left: 10% }dfn {  font-style: normal;  font-weight: bolder}var sub { font-style: normal }.note {  font-size: 85%;  margin-left: 10%}.SMA {  color: fuchsia;  background: transparent;  font-family: Kids, "Comic Sans MS", Jester}.oops {  font-family: Jester, "Comic Sans MS"}.author {  font-style: italic}.copyright {  font-size: smaller;  text-align: right;  clear: right}.toolbar {  text-align: center}.toolbar IMG {  float: right}.error {  color: #DC143C;  background: transparent;  text-decoration: none}.warning {  color: #FF4500;  background: transparent;  text-decoration: none}.error strong {  color: #DC143C;  background: #FFD700;  text-decoration: none}.warning strong {  color: #FF4500;  background: #FFD700;  text-decoration: none}.warning a:link, .warning a:visited, .warning a:active {  color: #FF4500;  background: transparent;  text-decoration: underline}.error a:link, .error a:visited, .error a:active {  color: #DC143C;  background: transparent;  text-decoration: underline}.error strong a:link, .error strong a:visited, .error strong a:active {  color: #DC143C;  background: #FFD700}.warning strong a:link, .warning strong a:visited, .warning strong a:active {  color: #FF4500;  background: #FFD700}colgroup.entity { text-align: center }.default { text-decoration: underline; font-style: normal }.required { font-weight: bold }td li.transitional, .elements li.transitional {  font-weight: lighter;  color: #696969;  background: transparent}td li.frameset, .elements li.frameset {  font-weight: lighter;  color: #808080;  background: transparent}.footer {  margin-top: 2em;  padding-top: 1em;  border-top: solid thin black}strong.legal {  font-weight: normal;  text-transform: uppercase}@media print {  input#toggler, .toolbar { display: none }}'! !!PromoterMain class methodsFor: 'class initialization' stamp: 'gsa 4/10/2004 16:35'!initialize	self registerAsApplication: 'PromoterMain' sessionClass: PromoterMainSession! !!PromoterMainSession methodsFor: 'as yet unclassified' stamp: 'gsa 4/10/2004 15:47'!domainmodel	"Here Promoter is the main class model"	PromoterModel isNil		ifTrue: [PromoterModel := Promoter new].	^ PromoterModel! !!PromoterSearchEngine methodsFor: 'initialization' stamp: 'gsa 4/15/2004 18:58'!initialize	| views |	super initialize.	views := self session domainmodel searchEngines asOrderedCollection				collect: [:each | PromoterListItemViewer metaobject: (each metaobject hideAttributeOf: #seURL;							 hideAttributeOf: #seMethod;							 hideAttributeOf: #seSuccessString;							 hideAttributeOf: #seUserAgent;							 hideAttributeOf: #seReferer;							 yourself)].	batcher := WABatchedList new items: views;				 batchSize: 5;				 yourself! !!PromoterSearchEngine methodsFor: 'rendering' stamp: 'gsa 4/15/2004 18:45'!renderContentOn: html 	"html h1: self class."	html h3: 'Search Engines' translated.	html cssClass: 'TABLE-LIST'.	html		table: [batcher batch				do: [:viewer | html						tableRow: [html render: viewer.							html								tableData: [html										anchorWithAction: [self edit: viewer metaobject baseobject]										text: 'edit';										 space;																				anchorWithAction: [self delete: viewer metaobject baseobject]										text: 'delete']]].			html attributeAt: #align put: #center.			html tableRowWith: batcher span: 8].	html break.	html		anchorWithAction: [self addNew]		text: 'Add a Search Engine'! !!PromoterSearchEngine methodsFor: 'rendering' stamp: 'gsa 4/15/2004 18:46'!style	^ '		body { font-size : 12px; font-family : Arial;  }		.TABLE-LIST { width: 500; font-size: 12px; font-family: Arial; border: thin groove; }	'! !!PromoterSearchEngine methodsFor: 'actions' stamp: 'gsa 4/15/2004 18:47'!addNew	| newSearchEngine |	newSearchEngine := self				call: (MWEditorVisitor model: SearchEngine new).	newSearchEngine		ifNotNil: [self session domainmodel addSearchEngine: newSearchEngine.			self initialize]! !!PromoterSearchEngine methodsFor: 'actions' stamp: 'gsa 4/15/2004 18:50'!delete: aSearchEngine 	(self confirm: 'Do you really want to delete ' , aSearchEngine asString , '?')		ifTrue: [self session domainmodel removeSearchEngine: aSearchEngine.			self initialize]! !!PromoterSearchEngine methodsFor: 'actions' stamp: 'gsa 4/15/2004 18:51'!edit: aSearchEngine 	self		call: (MWEditorVisitor model: aSearchEngine)! !!PromoterSearchEngine class methodsFor: 'class initialization' stamp: 'gsa 4/15/2004 18:41'!initialize	self registerAsApplication: 'PromoterSearchEngine' sessionClass: PromoterMainSession! !!PromoterTask methodsFor: 'accessing' stamp: 'gsa 4/24/2004 12:03'!companyToPromote	^ companyToPromote! !!PromoterTask methodsFor: 'accessing' stamp: 'gsa 4/24/2004 12:12'!companyToPromote: anObject 	companyToPromote := anObject! !!PromoterTask methodsFor: 'accessing' stamp: 'gsa 4/25/2004 09:22'!metaobject	| metaobject |	metaobject := MWMetaobject for: self.	metaobject		singleRelationshipAttribute: #companyToPromote		do: [:attribute | attribute label: 'Company';								relationshipTo: [PromoterMainSession currentSession domainmodel companies]				formatWith: [:each | each coSiteName , ' (' , each coURL , ')'];				 nilItemString: 'unknown' translated].	metaobject		multipleRelationshipAttribute: #searchEnginesToUse		do: [:attribute | attribute label: 'Search Engines to Use' translated;								relationshipTo: [PromoterMainSession currentSession domainmodel searchEngines]				formatWith: [:eachEngine | eachEngine seName, ' (' , eachEngine seURL , ')'];								addValidationRule: [:collection | collection isEmpty not]				errorString: 'Select at least one Search Engine' translated].	^ metaobject! !!PromoterTask methodsFor: 'accessing' stamp: 'gsa 4/24/2004 12:13'!searchEnginesToUse	"Returns the receiver's searchEnginesToUse."	searchEnginesToUse isNil		ifTrue: [self initializeSearchEnginesToUse].	^ searchEnginesToUse! !!PromoterTask methodsFor: 'accessing' stamp: 'gsa 4/24/2004 15:34'!searchEnginesToUse: anObject 	searchEnginesToUse := anObject! !!PromoterTask methodsFor: 'initialize-release' stamp: 'gsa 4/24/2004 12:15'!initializeSearchEnginesToUse	"Private - Initializes the receiver's searchEnginesToUse."	searchEnginesToUse := Set new! !!PromoterTaskUI methodsFor: 'initialization' stamp: 'gsa 4/25/2004 09:46'!initialize	| views |	super initialize.	views := self session domainmodel promoterTasks asOrderedCollection												collect: [:each | PromoterListItemViewer metaobject: (each metaobject hideAttributeOf: #searchEnginesToUse;							 yourself)].	batcher := WABatchedList new items: views;				 batchSize: 5;				 yourself! !!PromoterTaskUI methodsFor: 'rendering' stamp: 'gsa 5/22/2004 17:43'!renderContentOn: html 	"html h1: self class."	html h3: 'Promotion Tasks' translated.	html cssClass: 'TABLE-LIST'.	html		table: [batcher batch				do: [:viewer | html						tableRow: [html render: viewer.							html								tableData: [html										anchorWithAction: [self edit: viewer metaobject baseobject]										text: 'edit';										 space;																				anchorWithAction: [self delete: viewer metaobject baseobject]										text: 'delete';										 space;																				anchorWithAction: [self promot: viewer metaobject baseobject]										text: 'Promote!!']]].			html attributeAt: #align put: #center.			html tableRowWith: batcher span: 8].	html break.	html		anchorWithAction: [self addNew]		text: 'Add a Promotion Task'! !!PromoterTaskUI methodsFor: 'rendering' stamp: 'gsa 5/23/2004 15:31'!renderSEResults: html 	"html h1: self class."	html h3: 'Promotion Tasks' translated.	html cssClass: 'TABLE-LIST'.	html		table: [batcher batch				do: [:viewer | html						tableRow: [html render: viewer.							html								tableData: [html										anchorWithAction: [self edit: viewer metaobject baseobject]										text: 'edit';										 space;																				anchorWithAction: [self delete: viewer metaobject baseobject]										text: 'delete';										 space;																				anchorWithAction: [self promot: viewer metaobject baseobject]										text: 'Promote!!']]].			html attributeAt: #align put: #center.			html tableRowWith: batcher span: 8].	html break.	html		anchorWithAction: [self addNew]		text: 'Add a Promotion Task'! !!PromoterTaskUI methodsFor: 'rendering' stamp: 'gsa 4/24/2004 11:28'!style	^ '		body { font-size : 12px; font-family : Arial;  }		.TABLE-LIST { width: 500; font-size: 12px; font-family: Arial; border: thin groove; }	'! !!PromoterTaskUI methodsFor: 'actions' stamp: 'gsa 4/24/2004 11:29'!addNew	| newPromoterTask |	newPromoterTask := self				call: (MWEditorVisitor model: PromoterTask new).	newPromoterTask		ifNotNil: [self session domainmodel addPromoterTask: newPromoterTask.			self initialize]! !!PromoterTaskUI methodsFor: 'actions' stamp: 'gsa 5/23/2004 15:02'!addURL: aCompany inSearchEngine: aEngine 	"Aqu’ armo el string de adicion a buscadores, segœn el  	buscador de que se trate"	"Google Argentina"	"TO-DO Write the complete method"	"aPromoterTask explore"	| url |	aEngine seURL = 'http://www.google.com.ar/addurl'		ifTrue: ["Build the submit string"			"self halt."			"Armar como se debe"			"httpString := aEngine seURL , '?q=' , aCompany  			coURL , '&dq=' , aCompany coDescription ,  			'&submit=Agregar+URL'."			"----------------------------------"			"Armado de prueba"			"httpString := aEngine seURL , '?q=' , aCompany  			coURL , '&dq=squeak&submit=Agregar+URL'."			"----------------------------------"			"M‡s pruebas"			url := 'http://localhost/test.htm'.			"aReturnPage := HTTPSocket httpGet: url accept: 'text/html'."			aReturnPage := HTTPSocket httpGet: url.			"aReturnPage := HTTPSocket httpShowPage:  			httpString."			"HTTPSocket httpGet: url accept: 'text/html'"			"HTTPSocket httpGet: url."			"----------------------------------"			"aReturnPage := HTTPSocket httpShowPage:  			httpString."			^ aReturnPage].	aEngine seURL = 'http://www.altavista.com'		ifTrue: [url := 'http://localhost/test1.htm'.			aReturnPage := HTTPSocket httpGet: url accept: 'text/html'.			^ aReturnPage].	aEngine seURL = 'http://www.yahoo.com.ar'		ifTrue: [url := 'http://localhost/test2.htm'.			aReturnPage := HTTPSocket httpGet: url accept: 'text/html'.			^ aReturnPage]! !!PromoterTaskUI methodsFor: 'actions' stamp: 'gsa 4/24/2004 11:31'!delete: aPromoterTask	(self confirm: 'Do you really want to delete ' , aPromoterTask asString , '?')		ifTrue: [self session domainmodel removePromoterTask: aPromoterTask.			self initialize]! !!PromoterTaskUI methodsFor: 'actions' stamp: 'gsa 4/24/2004 11:32'!edit: aPromoterTask 	self		call: (MWEditorVisitor model: aPromoterTask)! !!PromoterTaskUI methodsFor: 'actions' stamp: 'gsa 5/22/2004 17:44'!promot: aPromoterTask 	(self confirm: 'Do you really want to start the Promotion Task to 	' , aPromoterTask companyToPromote coSiteName asString , '?')		ifTrue: ["self session domainmodel promote: aPromoterTask."			self promote: aPromoterTask.			"self inform: aReturnPage."			"Con lo anterior intentŽ mostrar la salida del addurl en 			google, pero no funciona, supongo que porque  			aReturnPage vuelve a #promote del model"			self initialize]! !!PromoterTaskUI methodsFor: 'actions' stamp: 'gsa 5/23/2004 15:08'!promote: aPromoterTask 	"The method that add the data to the search Engines"	"TO-DO Write the complete method"	"aPromoterTask explore"	| sEngines aCompany |	aCompany := aPromoterTask companyToPromote.	sEngines := aPromoterTask searchEnginesToUse.	"sEngines  	do: [:aEngine | Transcript show: aEngine seURL printString;  	cr]"	sEngines		do: [:aEngine | 			self addURL: aCompany inSearchEngine: aEngine.			self inform: aReturnPage]! !!PromoterTaskUI class methodsFor: 'class initialization' stamp: 'gsa 4/24/2004 16:55'!initialize	self registerAsApplication: 'PromoterTaskUI' sessionClass: PromoterMainSession! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/25/2004 11:01'!metaobject	"Mewa required method"	| metaobject |	metaobject := MWMetaobject for: self.	metaobject		textAttribute: #seName		do: [:attribute | attribute label: 'Search Engine' translated;				 maxLength: 20;				 addRequiredRule].	metaobject		textAttribute: #seURL		do: [:attribute | attribute label: 'URL' translated;				 maxLength: 150;				 addRequiredRule].	metaobject		singleRelationshipAttribute: #seMethod		do: [:attribute | attribute label: 'Method' translated;								relationshipTo: [self class seMethods]].	"metaobject  	textAttribute: #seMethod  	do: [:attribute | attribute label: 'Method' translated;  	maxLength: 4;  	addRequiredRule]."	metaobject		textAttribute: #seSuccessString		do: [:attribute | attribute label: 'Success String' translated;				 maxLength: 30;				 addRequiredRule].	metaobject		textAttribute: #seUserAgent		do: [:attribute | attribute label: 'User Agent' translated;				 maxLength: 50;				 addRequiredRule].	metaobject		textAttribute: #seReferer		do: [:attribute | attribute label: 'Referer' translated;				 maxLength: 50;				 addRequiredRule].	^ metaobject! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/15/2004 18:56'!seMethod	^ seMethod! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/4/2004 10:16'!seMethod: anObject	seMethod _ anObject! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/15/2004 18:54'!seName	^ seName! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/4/2004 10:04'!seName: anObject	seName _ anObject! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/15/2004 18:56'!seReferer	^ seReferer! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/4/2004 10:16'!seReferer: anObject	seReferer _ anObject! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/15/2004 18:56'!seSuccessString	^ seSuccessString! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/4/2004 10:16'!seSuccessString: anObject	seSuccessString _ anObject! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/15/2004 18:56'!seURL	^ seURL! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/4/2004 10:05'!seURL: anObject	seURL _ anObject! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/15/2004 18:56'!seUserAgent	^ seUserAgent! !!SearchEngine methodsFor: 'accessing' stamp: 'gsa 4/4/2004 10:16'!seUserAgent: anObject	seUserAgent _ anObject! !!SearchEngine class methodsFor: 'accessing' stamp: 'gsa 4/25/2004 10:54'!seMethods	^ #(#GET #POST)! !PromoterTaskUI initialize!PromoterSearchEngine initialize!PromoterMain initialize!PromoterInfo initialize!PromoterCompany initialize!